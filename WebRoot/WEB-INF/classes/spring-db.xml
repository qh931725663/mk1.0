<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
    
    <context:property-placeholder location="classpath:dbconfig.properties" ignore-unresolvable="true"/>

	<!-- 阿里 druid 数据库连接池 -->  
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >    
       	<!-- 数据库基本信息配置 -->  
		<property name="url" value ="${mkh.url}" />    
		<!-- 写成${username} 以fanbowen 作为用户登录，在这里直接用root -->
		<property name="username" value="${mkh.username}" />    
		<property name="password" value="${mkh.password}" />    
		<property name="driverClassName" value = "${mkh.driverClassName}" />    
		<property name="filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
		<property name="maxActive" value="${maxActive}" />  
       	<!-- 初始化连接数量 -->  
		<property name="initialSize" value="${initialSize}" />  
       	<!-- 配置获取连接等待超时的时间 -->  
		<property name="maxWait" value="${maxWait}" />  
       	<!-- 最小空闲连接数 -->  
		<property name="minIdle" value="${minIdle}" />    
       	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
		<property name = "timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />  
       	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />    
		<property name="validationQuery" value="${validationQuery}" />    
		<property name="testWhileIdle" value="${testWhileIdle}" />    
		<property name="testOnBorrow" value="${testOnBorrow}" />    
		<property name="testOnReturn" value="${testOnReturn}" />    
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />  
      	<!-- 打开 removeAbandoned 功能 -->  
		<property name="removeAbandoned" value="${removeAbandoned}" />  
       	<!-- 1800 秒，也就是 30 分钟 -->  
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />  
       	<!-- 关闭 abanded 连接时输出错误日志 -->     
		<property name="logAbandoned" value="${logAbandoned}" />  
	</bean> 
	<!-- jdbc事务管理器 --> 	
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >     
		<property name="dataSource" ref="dataSource" ></property>  
	</bean> 
    
    
    <!-- DAO层的配置 --> 	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" ></property>  
	</bean>  
	
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 日志记录仪 -->	
    <bean id="logger" class="com.haaa.cloudmedical.advice.RecordLogger" /> 	
    
	<!-- 切面 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" order="2"
			pointcut="execution(* *..service*..*(..))" />
		
		<!-- Logger切面 -->
		<aop:aspect id="loggerAspect" ref="logger" order="1">
			<aop:around method="record" pointcut="(execution(* *..service*..update*(..)) 
			or execution(* *..service*..delete*(..)) 
			or execution(* *..service*..add*(..)) 
			or execution(* *..service*..save*(..)) 
			or execution(* *..service*..insert*(..))) 
			and !bean(logService) "/>
		</aop:aspect>
	</aop:config>
	
</beans>
