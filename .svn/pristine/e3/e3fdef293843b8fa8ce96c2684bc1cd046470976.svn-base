package com.haaa.cloudmedical.app.equipment.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.haaa.cloudmedical.app.equipment.service.ElectrocardiographService;
import com.haaa.cloudmedical.app.util.CommonUserService;
import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.InfoJson;
import com.haaa.cloudmedical.entity.Electrocardiograph;
import com.haaa.cloudmedical.entity.EquipmentUse;

@RestController
@RequestMapping({ "/electrocardiograph" })
public class ElectrocardiographController {
	@Resource
	private ElectrocardiographService service;

	@Resource
	private CommonUserService commonUserService;

	private Logger logger = Logger.getLogger(ElectrocardiographController.class);

	@RequestMapping(value = { "/add.action" }, method = { RequestMethod.POST })
	public InfoJson add(EquipmentUse equipmentUse, Electrocardiograph electrocardiograph, HttpServletRequest request) {
		InfoJson infoJson = new InfoJson();
		try {
			equipmentUse.setUser_id(commonUserService.getPatientId(equipmentUse.getUser_id()));
			equipmentUse.setDoctor_id(commonUserService.getDoctorId());
			if (electrocardiograph.getHeartRate() != null) {
				infoJson = service.add(equipmentUse, electrocardiograph);
			} else {
				infoJson.setInfo("没有数据传入！！！");
			}
		} catch (Exception e) {
			logger.error("", e);

		}
		return infoJson;
	}

	/**
	 * 
	 * @Title: query @Description: 数据查询 @param user_id @param recent
	 * 不为null时表示，曲线图查询 @param year_month @param pageno @param pagesize @param
	 * request @return @throws
	 */
	@RequestMapping(value = { "/query.action" }, method = { RequestMethod.GET })
	public InfoJson query(Long user_id, String recent, String year_month, Integer pageno, Integer pagesize,
			Integer days, HttpServletRequest request) {
		InfoJson infoJson = new InfoJson();
		try {
			// 根据是否传递user_id判断从患者端还是医生端传递
			user_id = commonUserService.getPatientId(user_id);
			if (pagesize == null) {
				pagesize = Constant.DEFAULT_PAGESIZE;
			}
			if (recent != null) {
				if (days == null) {
					days = Constant.RECENT;
				}
				infoJson = service.queryRecent(user_id, days);
			} else if (pageno != null) {

				infoJson = service.pageQuery(user_id, year_month, pageno, pagesize);
			}
		} catch (Exception e) {
			logger.error("", e);

		}

		return infoJson;
	}

	/**
	 * 
	 * @Title: queryMonth @Description: 查询一年内具有数据的月份 @param
	 * user_id @return @throws
	 */
	@RequestMapping(value = { "/month.action" }, method = { RequestMethod.GET })
	public InfoJson queryMonth(Long user_id) {
		InfoJson infoJson = new InfoJson();
		try {
			// 根据是否传递user_id判断从患者端还是医生端传递
			user_id = commonUserService.getPatientId(user_id);
			infoJson = service.queryMonth(user_id);
		} catch (Exception e) {
			logger.error("", e);

		}
		return infoJson;
	}

	/**
	 * 
	 * @Title: getEcgById @Description: 根据use_id查询ecg @param
	 * order_id @return @throws
	 */
	@RequestMapping("/getEcgById.action")
	public InfoJson getEcgById(String user_id, String use_id) {
		InfoJson infoJson = new InfoJson();
		try {
			// 根据是否传递user_id判断从患者端还是医生端传递
			user_id = commonUserService.getPatientId(user_id);
			infoJson = service.getEcgById(user_id, use_id);
		} catch (Exception e) {
			logger.error("", e);

		}
		return infoJson;

	}

}