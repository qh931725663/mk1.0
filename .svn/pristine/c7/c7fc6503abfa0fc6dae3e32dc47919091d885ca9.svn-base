package com.haaa.cloudmedical.app.user.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.haaa.cloudmedical.app.user.service.UserAppService;
import com.haaa.cloudmedical.app.util.CommonUserService;
import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.ResponseDTO;
import com.haaa.cloudmedical.common.util.BeanUtil;
import com.haaa.cloudmedical.common.util.IdcardValidator;
import com.haaa.cloudmedical.common.util.MD5Util;
import com.haaa.cloudmedical.common.util.redis.RedisCacheUtil;
import com.haaa.cloudmedical.entity.User;

import com.taobao.api.ApiException;
import com.taobao.api.DefaultTaobaoClient;
import com.taobao.api.TaobaoClient;
import com.taobao.api.request.AlibabaAliqinFcSmsNumSendRequest;
import com.taobao.api.response.AlibabaAliqinFcSmsNumSendResponse;

/**
 * 
 * @author James
 * 
 */

@Controller
@RequestMapping("/user-app")
public class UserAppController {

	@Autowired
	private UserAppService service;

	@Autowired
	private CommonUserService common;

	@Autowired
	public RedisCacheUtil<Object> redis;

	private Logger logger = Logger.getLogger(UserAppController.class);

	/**
	 * 检验手机号码是否已存在
	 * 
	 * @param user_phone
	 * @return
	 */
	public boolean contain(String user_phone) {
		boolean flag = false;
		int size = service.getPhones(user_phone);
		if (size > 0)
			flag = true;
		return flag;
	}

	/**
	 * 检验身份证号码是否已存在
	 * 
	 * @param user_phone
	 * @return
	 */
	@RequestMapping("/checkUserCard.action")
	@ResponseBody
	public boolean checkUserCard(String user_card) {
		boolean flag = false;
		int size = service.getUserCard(user_card);
		if (size > 0)
			flag = true;
		return flag;
	}

	@RequestMapping("/createNum.action")
	@ResponseBody
	public ResponseDTO createNum(String user_phone) {
		Random random = new Random();
		int[] nums = { random.nextInt(100), random.nextInt(100) };
		service.redisPut("validate_" + user_phone, String.valueOf(nums[0] + nums[1]), 0);
		Map<String, String> map = new HashMap<>();
		map.put("formula", nums[0] + " + " + nums[1] + " = ?");
		ResponseDTO dto = new ResponseDTO();
		dto.setFlag(true);
		dto.setData(map);
		return dto;
	}

	@RequestMapping("/validateNum.action")
	@ResponseBody
	public ResponseDTO validateNum(String user_phone, String result, String op_type) {
		ResponseDTO dto = new ResponseDTO();
		if (result != null && !"".equals(result)) {
			Object validate = service.redisGet("validate_" + user_phone);
			if (validate != null) {
				if (result.equals(validate.toString())) {
					service.redisDelete("validate_" + user_phone);
					dto = sendMessage(user_phone, op_type);
				} else {
					dto.setErrmsg("输入有误");
				}
			} else {
				dto.setErrmsg("手机号码不正确");
			}
		} else {
			dto.setErrmsg("结果为空");
		}
		return dto;
	}

	/**
	 * 获取验证码
	 * 
	 * @param user_phone
	 * @return
	 */
	@RequestMapping("/sendMessage.action")
	@ResponseBody
	public ResponseDTO sendMessage(String user_phone, String op_type) {
		String errmsg = "";
		ResponseDTO dto = new ResponseDTO();
		boolean flag = this.contain(user_phone);
		if (op_type.equals("1")) {
			if (flag) {
				errmsg = "该号码已注册！";
				dto.setErrmsg(errmsg);
				logger.error(user_phone + ":" + errmsg);
				return dto;
			}
		} else if (op_type.equals("2")) {
			if (!flag) {
				errmsg = "该号码不存在！";
				dto.setErrmsg(errmsg);
				logger.error(user_phone + ":" + errmsg);
				return dto;
			}
		} else if (op_type.equals("3")) {
			/*if (flag) {
				errmsg = "该号码已注册！";
				dto.setErrmsg(errmsg);
				logger.error(user_phone + ":" + errmsg);
				return dto;
			}*/
		}
		long validate = Math.round((Math.random() * 9 + 1) * 100000);
		String url = Constant.MESSAGE_URL;
		String appkey = Constant.MESSAGE_APPKEY;
		String secret = Constant.MESSAGE_SECRET;
		TaobaoClient client = new DefaultTaobaoClient(url, appkey, secret);
		AlibabaAliqinFcSmsNumSendRequest req = new AlibabaAliqinFcSmsNumSendRequest();
		req.setSmsType("normal");
		req.setSmsFreeSignName(Constant.MESSAGE_SIGN_NAME);
		req.setSmsParamString("{'code':'" + validate + "','time':'2'}");
		req.setRecNum(user_phone);
		req.setSmsTemplateCode(Constant.MESSAGE_TEMPLATE_CODE);
		AlibabaAliqinFcSmsNumSendResponse rsp = null;
		try {
			rsp = client.execute(req);
			flag = rsp.isSuccess();
			if (flag) {
				service.redisPut(user_phone, String.valueOf(validate), 120);// 验证码有效期120s
			}
			dto.setFlag(true);
		} catch (ApiException e) {
			dto.setErrmsg("验证码发送失败。");
			logger.error("发送验证码失败：" + e.getMessage());
		}

		return dto;
	}

	/**
	 * 检验验证码
	 * 
	 * @param user_phone
	 * @param user_pwd
	 * @param validate
	 * @return
	 */
	public boolean validate(String user_phone, String validate) {
		boolean flag = false;
		Object validate_redis = service.redisGet(user_phone);
		if (validate_redis != null && !"".equals(validate_redis.toString())) {
			if (validate.equals(validate_redis.toString()))
				flag = true;
		}
		return flag;
	}

	/**
	 * 新用户注册
	 * 
	 * @param user_phone
	 * @param user_pwd
	 * @param validate
	 * @return
	 */
	@RequestMapping("/register.action")
	@ResponseBody
	public Object register(String user_phone, String user_pwd, String user_type, String validate) {
		ResponseDTO dto = null;
		boolean flag = this.validate(user_phone, validate);
		if (flag) {
			dto = service.register(user_phone, MD5Util.encode(user_pwd), Constant.USER_TYPE_PATIENT);
		} else {
			dto = new ResponseDTO();
			dto.setErrmsg("验证码错误！");
			logger.error(user_phone + ":" + "验证码错误！");
		}
		return dto;
	}

	/**
	 * 用户登录
	 * 
	 * @param user_phone
	 * @param user_pwd
	 * @return
	 */
	@RequestMapping("/login.action")
	@ResponseBody
	public Object login(String user_phone, String user_card, String user_pwd, String os_type) {
		ResponseDTO dto = service.login(user_phone, user_card, MD5Util.encode(user_pwd), os_type);
		return dto;
	}

	/**
	 * 用户退出登录
	 * 
	 * @param user_phone
	 * @param user_pwd
	 * @return
	 */
	@RequestMapping("/logout.action")
	@ResponseBody
	public void logout(String loginToken) {
		service.redisDelete(loginToken);
	}

	/**
	 * 保存新用户基本信息
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/updateUser.action")
	@ResponseBody
	public Object save(User user, String doctor_id) {
		boolean flag = true;
		ResponseDTO dto = new ResponseDTO();
		if (user.getUser_card() != null && user.getUser_card().length() > 0) {
			IdcardValidator validate = new IdcardValidator();
			flag = validate.isValidatedAllIdcard(user.getUser_card());
		}
		if (flag) {
			Map<String, Object> user_map = common.getUserMap();
			/*Map<String, Object> user_map = new HashMap<String, Object>();
			user_map.put("user_id", 609);*/
			if (user_map != null) {
				user.setUser_id(user_map.get("user_id").toString());
				user.setUser_type(Constant.USER_TYPE_PATIENT);
				dto = service.updateUser(user, doctor_id);
			}
		} else {
			dto.setErrmsg("身份证不合法");
		}
		return dto;
	}

	/**
	 * 获取用户基本信息
	 * 
	 * @param user_id
	 * @return
	 */
	@RequestMapping("/getUserInfo.action")
	@ResponseBody
	public ResponseDTO getUser() {
		ResponseDTO dto = null;
		Map<String, Object> user_map = common.getUserMap();
		if (user_map != null) {
			String user_id = user_map.get("user_id").toString();
			dto = service.getUser(user_id, Constant.USER_TYPE_PATIENT);
		}
		return dto;
	}

	/**
	 * 验证用户登录状态 1:Android 2:IOS
	 * 
	 * @param loginToken
	 * @param verson
	 * @param os_type
	 * @return
	 */
	@RequestMapping("/isLogin.action")
	@ResponseBody
	public Map<String, Object> validateLogin(String loginToken, String verson, String os_type, String user_type) {
		Map<String, Object> map = new HashMap<>();
		if (loginToken != null && !"".equals(loginToken.toString())) {
			Map<String, Object> validate = redis.getCacheMap(loginToken);
			if (validate != null) {
				map.put("flag", true);
			} else {
				map.put("flag", false);
			}
		} else {
			map.put("flag", false);
		}
		String key_verson = "";
		String key_url = "";
		if(user_type.equals(Constant.USER_TYPE_PATIENT)){
			key_verson = "patient_andriod_verson";
			key_url = "download_app_patient_url";
		}else if(user_type.equals(Constant.USER_TYPE_DOCTOR)){
			key_verson = "doctor_andriod_verson";
			key_url = "download_app_doctor_url";
		}
		String andriod_verson = BeanUtil.getProperty("dbconfig").getString(key_verson);
		if (!andriod_verson.equals(verson)) {
			String download_app_url = BeanUtil.getProperty("dbconfig").getString(key_url);
			map.put("update", 1);
			map.put("verson", andriod_verson);
			map.put("download_app_url", download_app_url);
		} else {
			map.put("update", 0);
		}

		return map;
	}

	/**
	 * 用户重置密码
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/password.action")
	@ResponseBody
	public Object password(String user_phone, String user_pwd, String validate) {
		boolean flag = false;
		flag = this.validate(user_phone, validate);
		ResponseDTO dto = null;
		if (flag) {
			dto = service.password(user_phone, MD5Util.encode(user_pwd));
		} else {
			dto = new ResponseDTO();
		}
		return dto;
	}

	/**
	 * 获取系统时间
	 * 
	 * @return
	 */
	@RequestMapping("/getSysDate.action")
	@ResponseBody
	public String getMysqlTime() {
		String year = String.valueOf(service.getMySqlTime());
		return year;
	}

	@RequestMapping("/getAhdi.action")
	@ResponseBody
	public Object getAhdi(String user_card, String user_phone) {
		String ahdi_value = "";
		Map<String, Object> map = new HashMap<>();
		double ahdi = service.getAhdi(user_phone, user_card);
		if (ahdi != -1) {
			if (ahdi >= 0 && ahdi < 2.5)
				ahdi_value = "高";
			else if (ahdi >= 2.5 && ahdi < 5)
				ahdi_value = "中高";
			else if (ahdi >= 5 && ahdi < 7.5)
				ahdi_value = "中";
			else if (ahdi >= 7.5 && ahdi < 10)
				ahdi_value = "低";
		}
		map.put("ahdi", ahdi_value);
		return map;
	}

	@RequestMapping("/getAhdiValue.action")
	@ResponseBody
	public Object getAhdi() {
		double ahdi_value = 0;
		Map<String, Object> user_map = common.getUserMap();
		if (user_map != null) {
			String user_id = user_map.get("user_id").toString();
			ahdi_value = service.getAhdiValue(user_id);
		}
		Map<String, Object> map = new HashMap<>();
		map.put("ahdi", ahdi_value);
		return map;
	}

	@RequestMapping("/bind.action")
	@ResponseBody
	public Object bind(String user_phone, String user_card, String validate) {
		ResponseDTO dto = new ResponseDTO();
		boolean flag = validate(user_phone, validate);
		if (flag) {
			Map<String, Object> user = service.bind(user_phone, user_card);
			if (user!=null) {
				dto.setData(user);
				dto.setFlag(true);
			} else {
				dto.setErrmsg("该手机号已绑定其他身份证号!");
			}
		} else {
			dto.setErrmsg("验证码错误!");
		}
		return dto;
	}

}
