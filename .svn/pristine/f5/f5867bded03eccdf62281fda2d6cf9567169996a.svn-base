/**
 * 
 */
package com.haaa.cloudmedical.wechat.service.impl;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.StdDTO;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.dao.UserAppDao;
import com.haaa.cloudmedical.dao.equipment.EarThermometerDao;
import com.haaa.cloudmedical.wechat.service.IWeixinEarThermometerService;

/**
 * @author Bowen Fan
 *
 */
@Service
public class WeixinEarThermometerServiceImpl implements IWeixinEarThermometerService{
	
	@Resource
	private EarThermometerDao earThermometerDao;
	
	@Resource
	private UserAppDao userAppDao;
	
	private NumberFormat nFormat =DecimalFormat.getInstance();



	@Override
	public StdDTO getGraph(String open_id, int days) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		Map<String, Object> userMap = userAppDao.getUserByOpenId(open_id);
		long user_id = (long) userMap.get("user_id");
		List<Map<String, Object>> list = earThermometerDao.queryRecent(user_id, days);
		retMap.put("datalist", list);
		int high = 0;
		int low = 0;
		int normal = 0;
		float temperature;
		nFormat.setMinimumFractionDigits(1);
		for (Map<String, Object> map : list) {
			temperature = (float) map.get("temperature");
			if (temperature > Constant.HIGH_TEMPERATURE) {
				high++;
			} else if (temperature < Constant.LOW_TEMPERATURE) {
				low++;
			} else {
				normal++;
			}
			map.put("temperature",nFormat.format(map.get("temperature")));
		}
		retMap.put("temprature", list.get(0).get("temperature"));
		retMap.put("datetime", list.get(0).get("datetime"));
		retMap.put("high", high);
		retMap.put("low", low);
		retMap.put("normal", normal);
		return StdDTO.setSuccess(retMap);
	}


	@Override
	public StdDTO getPage(String open_id,String year_month, int pageno, int pagesize) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		Map<String, Object> userMap = userAppDao.getUserByOpenId(open_id);
		long user_id = (long) userMap.get("user_id");
		List<Map<String, Object>> dataList;
		if (year_month!=null) {
			dataList = earThermometerDao.pageQuery(user_id, pageno, pagesize);
		}else{
			dataList = earThermometerDao.queryByMonth(user_id, year_month, pageno, pagesize);
		}
		int pagecount = earThermometerDao.pageNumber(user_id + "", pagesize);
		nFormat.setMinimumFractionDigits(1);
		Object data = dataList.stream()
				.collect(Collectors.groupingBy(m -> DateUtil.dateFormat((Date) m.get("datetime"), "yyyy-MM")))
				.entrySet().stream().map(s -> new HashMap<String, Object>() {
					{
						put("yearmonth", s.getKey());
						s.getValue().forEach(ss -> {
							ss.put("period",periodDefine(Integer.parseInt(DateUtil.dateFormat((Date) ss.get("datetime"), "HH"))));
							ss.put("datetime", DateUtil.dateFormat((Date) ss.get("datetime"), "yyyy-MM-dd HH:mm"));
							ss.put("temperature",nFormat.format(ss.get("temperature")));
							ss.remove("equipment_use_order_id");
						});
						put("datalist", s.getValue());
					}
				}).sorted((s1, s2) -> {
					return String.valueOf(s2.get("yearmonth")).compareTo(String.valueOf(s1.get("yearmonth")));
				}).collect(Collectors.toList());
		retMap.put("monthlist", data);
		retMap.put("pageno", pageno);
		retMap.put("pagecount", pagecount);
		retMap.put("pagesize", pagesize);
		return StdDTO.setSuccess(retMap);
	}



	@Override
	public StdDTO getMonths(String open_id) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		Map<String, Object> userMap = userAppDao.getUserByOpenId(open_id);
		long user_id = (long) userMap.get("user_id");
		retMap.put("list", earThermometerDao.queryMonth(user_id));
		return StdDTO.setSuccess(retMap);
	}

	
	/**
	 * 
	 * @Title: periodDefine @Description: 根据查询的时间 判断早中晚时间段，-1上午，0下午，1晚上 @param
	 *         hour @return int 返回类型 @throws
	 */
	private int periodDefine(int hour) {
		int period = 0;
		if (hour < Constant.MORNING_END && hour >= 0) {
			period = -1;
		} else if (hour < Constant.NIGHT_BEGIN) {
			period = 0;
		} else {
			period = 1;
		}
		return period;
	}
}
