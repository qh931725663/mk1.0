package com.haaa.cloudmedical.app.chrondoc.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.haaa.cloudmedical.app.chrondoc.service.HypertensionAppservice;
import com.haaa.cloudmedical.app.user.service.DoctorAppService;
import com.haaa.cloudmedical.common.entity.ResponseDTO;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.entity.Hypertension;

@RestController
@RequestMapping("/hypertension-app")
public class HypertensionAppController {

	@Autowired
	private HypertensionAppservice service;
	
	private static Logger logger = Logger.getLogger(DoctorAppService.class);

	/******************************************** add ******************************************************/
	/**
	 * 新增高血压慢病档案
	 * 
	 * @param patient_id
	 */
	@RequestMapping("/addNewHypertension.action")
	public ResponseDTO addNewHypertension(String patient_id) {
		ResponseDTO dto = new ResponseDTO();
		String create_date = DateUtil.dateFormat(new Date(), "yyyy-MM-dd HH:mm:ss");
		Hypertension hypertension = new Hypertension();
		hypertension.setUser_id(patient_id);
		hypertension.setCreate_date(create_date);
		try {
			long order_id = service.addNewHypertensionDocument(hypertension);
			dto.setFlag(true);
			dto.setData(order_id);
		} catch (Exception e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}

		return dto;
	}

	/**
	 * 新增高血压慢病档案-基本信息
	 * 
	 * @see updateBasicInfo.action
	 * @param request
	 */
	@Deprecated
	@RequestMapping("/addBasicInfo.action")
	public ResponseDTO addBasicInfo(HttpServletRequest request) {
		ResponseDTO dto = new ResponseDTO();
		Map<String, String[]> raw = request.getParameterMap();
		Map<String, String[]> data = service.getHypertensionData(raw);
		try {
			service.check(data, "1");
			service.addBasicInfo(data);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;

	}

	/**
	 * 新增高血压慢病档案-辅助检查
	 * 
	 * @see updateCheckInfo.action
	 * @param request
	 */
	@Deprecated
	@RequestMapping("/addCheckInfo.action")
	public ResponseDTO addCheckInfo(HttpServletRequest request) {
		ResponseDTO dto = new ResponseDTO();
		Map<String, String[]> raw = request.getParameterMap();
		Map<String, String[]> data = service.getHypertensionData(raw);
		try {
			service.check(data, "2");
			service.addCheckInfo(data);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;
	}

	/**
	 * 新增高血压慢病档案--工作站
	 * 
	 * @see addWorkStationInfo.action
	 * @param request
	 */
	@Deprecated
	@RequestMapping("/addWorkStationInfo.action")
	public ResponseDTO addWorkStationInfo(HttpServletRequest request) {
		ResponseDTO dto = new ResponseDTO();
		Map<String, String[]> raw = request.getParameterMap();
		Map<String, String[]> data = service.getHypertensionData(raw);
		try {
			service.check(data, "3");
			service.addWorkstation(data);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;
	}

	/******************************************** update ******************************************************/

	/**
	 * 修改或完善高血压慢病档案-基本信息
	 * 
	 * @param request
	 */
	@RequestMapping("/updateBasicInfo.action")
	public ResponseDTO updateBasicInfo(HttpServletRequest request) {
		ResponseDTO dto = new ResponseDTO();
		Map<String, String[]> raw = request.getParameterMap();
		Map<String, String[]> data = service.getHypertensionData(raw);
		try {
			service.check(data, "1");
			service.updateBasicInfo(data);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;
	}

	/**
	 * 修改或完善高血压慢病档案-辅助检查
	 * 
	 * @param request
	 */
	@RequestMapping("/updateCheckInfo.action")
	public ResponseDTO updateCheckInfo(HttpServletRequest request) {
		ResponseDTO dto = new ResponseDTO();
		Map<String, String[]> raw = request.getParameterMap();
		Map<String, String[]> data = service.getHypertensionData(raw);
		try {
			service.check(data, "2");
			service.updateCheckInfo(data);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;
	}

	/**
	 * 修改或完善高血压慢病档案--工作站
	 * 
	 * @param request
	 */
	@RequestMapping("/updateWorkStationInfo.action")
	public ResponseDTO updateWorkStationInfo(HttpServletRequest request) {
		ResponseDTO dto = new ResponseDTO();
		Map<String, String[]> raw = request.getParameterMap();
		Map<String, String[]> data = service.getHypertensionData(raw);
		try {
			service.check(data, "3");
		} catch (Exception e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		if(raw.get("risk")==null){
			dto.setErrmsg("评估结果不能为空");
			logger.error("评估结果不能为空");
			return dto;
		}
		try {
			service.updateWorkStation(data);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;
	}

	/******************************************** delete ******************************************************/

	/**
	 * 删除高血压慢病档案
	 * 
	 * @param order_id
	 */
	@RequestMapping("/deleteHypertension.action")
	public ResponseDTO deleteHypertension(String order_id) {
		ResponseDTO dto = new ResponseDTO();
		try {
			service.deleteHypertension(order_id);
			dto.setFlag(true);
		} catch (RuntimeException e) {
			dto.setErrmsg(e.getLocalizedMessage());
			logger.error(e.getLocalizedMessage(), e);
		}
		return dto;

	}

	/******************************************** query ******************************************************/

	/**
	 * 获取档案基本信息
	 * @param patient_id
	 */
	@RequestMapping("/getHypertensionInfo.action")
	public List<Map<String, String>> getHypertensionInfo(String patient_id) {
		List<Map<String, String>> hypertensionInfo = service.getHypertensionInfo(patient_id);
		return hypertensionInfo;
	}

	/**
	 * 获取基本信息
	 * @param order_id
	 * @return
	 */
	@RequestMapping("/getBasicInfo.action")
	public Object getBasicInfo(String order_id) {
		ResponseDTO dto = new ResponseDTO();
		Map<String,Object> document = service.getDocuMent(order_id, "1");		
		dto.setFlag(true);
		dto.setData(document);
		return dto;
	}

	/**
	 * 获取辅助检查信息
	 * @param order_id
	 * @return
	 */
	@RequestMapping("/getCheckInfo.action")
	public Object getCheckInfo(String order_id) {
		ResponseDTO dto = new ResponseDTO();
		Map<String,Object> document = service.getDocuMent(order_id, "2");
		dto.setFlag(true);
		dto.setData(document);
		return dto;
	}

	/**
	 * 获取工作站内容信息
	 * @param order_id
	 * @return
	 */
	@RequestMapping("/getWorkStationInfo.action")
	public Object getWorkStationInfo(String order_id) {
		ResponseDTO dto = new ResponseDTO();
		Map<String,Object> document = service.getDocuMent(order_id, "3");
		dto.setFlag(true);
		dto.setData(document);
		return dto;
	}
}
