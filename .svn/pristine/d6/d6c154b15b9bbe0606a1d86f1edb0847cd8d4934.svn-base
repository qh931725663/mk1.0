package com.haaa.cloudmedical.common.service;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.apache.xmlbeans.impl.xb.xsdschema.Public;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.haaa.cloudmedical.common.entity.InfoJson;
import com.haaa.cloudmedical.common.util.redis.RedisCacheUtil;
import com.sun.org.apache.bcel.internal.generic.NEW;

import javassist.runtime.Inner;

/**
 * 
 * @author haaa
 *
 */
@Service
public class PositionService {
	@Resource
	private JdbcTemplate jdbcTemplate;

	@Resource
	private RedisCacheUtil redisCacheUtil;

	private Logger logger = Logger.getLogger(PositionService.class);

	/**
	 * 初始化常量数据：省、市、医院、部门
	 */
	public void positionInfoInit() {
		List<Map<String, Object>> provinceList = null;
		String sql = "SELECT areacounty_id,areacounty_name FROM k_areacounty_all where parent_id = 100000";
		provinceList = jdbcTemplate.queryForList(sql);
		redisCacheUtil.setCacheList("province", provinceList);
		List<Map<String, Object>> cityList = null;
		for (Map<String, Object> map : provinceList) {
			String prov_id = String.valueOf(map.get("areacounty_id"));
			sql = "SELECT areacounty_id,areacounty_name FROM k_areacounty_all where parent_id=" + prov_id;
			cityList = jdbcTemplate.queryForList(sql);
			redisCacheUtil.setCacheList("province_city_" + prov_id, cityList);
			List<Map<String, Object>> hospList = null;
			for (Map<String, Object> map2 : cityList) {
				String city_id = String.valueOf(map2.get("areacounty_id"));
				sql = "SELECT order_id,hosp_name FROM k_hosp where area_id=" + city_id;
				hospList = jdbcTemplate.queryForList(sql);
				redisCacheUtil.setCacheList("city_hosp_" + city_id, hospList);
				List<Map<String, Object>> departList = null;
				for (Map<String, Object> map3 : hospList) {
					String hosp_id = String.valueOf(map3.get("order_id"));
					sql = "SELECT order_id,department_name FROM k_department where hosp_order_id=" + hosp_id;
					departList = jdbcTemplate.queryForList(sql);
					redisCacheUtil.setCacheList("hosp_department_" + hosp_id, departList);
					List<Map<String, Object>> doctorList = null;
					for (Map<String, Object> map4 : departList) {
						String department_id = String.valueOf(map4.get("order_id"));
						sql = "SELECT A.doctor_id,A.doctor_name,A.doctor_title,B.user_head_pic_upload_index FROM d_doctor A,n_user B where A.doctor_id=B.user_id AND A.department_order_id="
								+ department_id;
						doctorList = jdbcTemplate.queryForList(sql);
						redisCacheUtil.setCacheList("department_doctor_" + department_id, doctorList);
					}
				}
			}
		}
	}

	/*
	 * 初始化医生信息到redis
	 */
	public void doctorsInit() {
		String sql = "select A.doctor_id,A.doctor_name,A.doctor_title,A.department_order_id,B.user_head_pic_upload_index FROM d_doctor A,n_user B where A.doctor_id=B.user_id";
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sql);
		for (Map<String, Object> map : list) {
			redisCacheUtil.setCacheObject("doctor_" + map.get("doctor_id"), map);
		}
	}

	/*
	 * 根据医生ID查询医生信息
	 */
	public InfoJson getDoctorById(Long doctor_id) {
		InfoJson infoJson = new InfoJson();
		try {
			infoJson.setData(redisCacheUtil.getCacheObject("doctor_" + doctor_id.intValue()));
			infoJson.setStatus(1);
		} catch (Exception e) {
			logger.error("", e);
		}
		return infoJson;
	}

	// /**
	// * 根据条件查询地点
	// *
	// * @param type
	// * 查询类型
	// * @param parent_id
	// * 父ID
	// * @return
	// */
	// public List<Map<String, Object>> getPositionList(String type, String
	// parent_id) {
	// if (parent_id == null || parent_id.equals("")) {
	// return (List<Map<String, Object>>) redisCacheUtil.getCacheList(type);
	// }
	// System.out.println(type);
	// System.out.println(parent_id);
	// return (List<Map<String, Object>>) redisCacheUtil.getCacheList(type + "_"
	// + parent_id);
	// }
	//
	// /**
	// * 模糊查询从数据库内查询医院数据并把医院科室信息返回
	// * condition内容为空返回null
	// * @param condition
	// * @return
	// */
	// public List<Map<String, Object>> getHospitals(String condition) {
	// if (condition != null && !condition.equals("")) {
	// condition = "%"+condition+"%";
	// String sql = "SELECT order_id,hosp_name FROM k_hosp where hosp_name like
	// ?";
	// return jdbcTemplate.queryForList(sql, condition);
	// }
	// return null;
	// }

	/**
	 * 根据条件查询地点
	 * 
	 * @param type
	 *            查询类型
	 * @param parent_id
	 *            父ID
	 * @return
	 */
	public InfoJson getPositionList(String type, String parent_id) {
		InfoJson infoJson = new InfoJson();
		try {
			if (parent_id == null || parent_id.equals("")) {
				infoJson.setData(redisCacheUtil.getCacheList(type));
				infoJson.setStatus(1);
			} else {
				infoJson.setData(redisCacheUtil.getCacheList(type + "_" + parent_id));
				infoJson.setStatus(1);
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return infoJson;
	}

	/**
	 * 模糊查询从数据库内查询医院数据并把医院科室信息返回 condition内容为空返回null
	 * 
	 * @param condition
	 * @return
	 */
	public InfoJson getHospitals(String condition) {
		InfoJson infoJson = new InfoJson();
		try {
			if (condition != null && !condition.equals("")) {
				condition = "%" + condition + "%";
				String sql = "SELECT order_id,hosp_name FROM k_hosp where hosp_name like ?";
				infoJson.setData(jdbcTemplate.queryForList(sql, condition));
				infoJson.setStatus(1);
			} else {
				String sql = "SELECT order_id,hosp_name FROM k_hosp";
				infoJson.setData(jdbcTemplate.queryForList(sql));
				infoJson.setStatus(1);
			}
		} catch (Exception e) {
			logger.error("", e);
		}

		return infoJson;
	}

	public InfoJson getDoctors(String condition) {
		InfoJson infoJson = new InfoJson();
		try {
			if (condition != null && !condition.equals("")) {
				condition = "%" + condition + "%";
				String sql = "SELECT doctor_id,doctor_name FROM d_doctor where doctor_name like ?";
				infoJson.setData(jdbcTemplate.queryForList(sql, condition));
				infoJson.setStatus(1);
			} else {
				String sql = "SELECT doctor_id,doctor_name FROM d_doctor ";
				infoJson.setData(jdbcTemplate.queryForList(sql));
				infoJson.setStatus(1);
			}
		} catch (Exception e) {
			logger.error("", e);
		}

		return infoJson;
	}

}
