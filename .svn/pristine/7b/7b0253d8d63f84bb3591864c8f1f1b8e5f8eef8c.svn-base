package com.haaa.cloudmedical.platform.healthRecords.service.impl;

import java.text.DecimalFormat;
import java.text.Format;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.haaa.cloudmedical.app.user.service.DoctorAppService;
import com.haaa.cloudmedical.common.annotation.Log;
import com.haaa.cloudmedical.common.entity.InfoJson;
import com.haaa.cloudmedical.common.entity.Page;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.common.util.IdCard;
import com.haaa.cloudmedical.common.util.StringUtil;
import com.haaa.cloudmedical.dao.ChronicPlanDao;
import com.haaa.cloudmedical.dao.ChronicRecordsDao;
import com.haaa.cloudmedical.entity.Hypertension;
import com.haaa.cloudmedical.entity.HypertensionAnswer;
import com.haaa.cloudmedical.entity.HypertensionQuestion;
import com.haaa.cloudmedical.platform.healthRecords.service.ChronicRecordsService;
import com.haaa.cloudmedical.platform.plan.model.PlanVo;
@Service
@Log(name = "慢病档案管理")
public class ChronicRecordsImpl implements ChronicRecordsService{
	@Autowired
    private ChronicPlanDao planDao;
	@Autowired
    private ChronicRecordsDao dao;
	
	@Override
	public Page getPage(PlanVo model) {
		  String temp = null;
	        List<Object> values = new ArrayList<Object>();
	        StringBuilder sql = new StringBuilder("select user_id,user_name,user_card,user_phone,c.doctor_name,getahdi(a.ahdi_value) ahdi_value"
	                                              + ",chronic,findname(a.user_sex) user_sex,user_age,findname(a.user_marriage) user_marriage"
	                                              + ",findname(a.user_work) user_work,date_format(a.update_date,'%Y-%m-%d %H:%i') update_date"
	                                              + " from n_user a left join d_patient b on a.user_id = b.patient_id left join d_doctor c on "
	                                              + "b.doctor_id = c.doctor_id where a.chronic != '0'");
	        // 姓名
	        temp = model.getUser_name();
	        if (temp != null && !"".equals(temp)) {
	            values.add("%" + temp + "%");
	            sql.append(" and a.user_name like ?");
	        }
	        // 身份证号码
	        temp = model.getUser_card();
	        if (temp != null && !"".equals(temp)) {
	            values.add("%" + temp + "%");
	            sql.append(" and a.user_card like ?");
	        }
	        // 性别
	        temp = model.getUser_sex();
	        if (temp != null && !"".equals(temp)) {
	            values.add(temp);
	            sql.append(" and a.user_sex = ?");
	        }
	        // 慢病类型
	        temp = model.getChronic();
	        if (StringUtils.isNotBlank(temp)) {
	            values.add(temp);
	            sql.append(" and FIND_IN_SET(?, chronic)");
	        }
	        // 工作强度
	        temp = model.getUser_work();
	        if (StringUtils.isNotBlank(temp)) {
	            values.add(temp);
	            sql.append(" and a.user_work = ?");
	        }
	        // 家庭医生
	        temp = model.getDoctor_name();
	        if (StringUtils.isNotBlank(temp)) {
	            values.add("%" + temp + "%");
	            sql.append(" and c.doctor_name like ?");
	        }
	        // 更新时间
	        if (StringUtil.isBlank(model.getDatemin()) && StringUtil.isNotBlank(model.getDatemax())) {
	            values.add(model.getDatemax());
	            sql.append(" and a.update_date <= ?");
	        } else if (StringUtil.isNotBlank(model.getDatemin()) && StringUtil.isBlank(model.getDatemax())) {
	            values.add(model.getDatemin());
	            sql.append(" and a.update_date >= ?");
	        } else if (StringUtil.isNotBlank(model.getDatemin()) && StringUtil.isNotBlank(model.getDatemax())
	                   && !model.getDatemin().equals(model.getDatemax())) {
	            values.add(model.getDatemin());
	            values.add(model.getDatemax());
	            sql.append(" and a.update_date >= ? and a.update_date <= ?");
	        } else if (StringUtil.isNotBlank(model.getDatemin()) && model.getDatemin().equals(model.getDatemax())) {
	            values.add(model.getDatemin());
	            sql.append(" and date_format(a.update_date,'%Y-%m-%d') = ?");
	        }
	        // 查询分页
	        Page page = planDao.pageQuery(sql.toString(), values.toArray(), model.getPageno());

	        List<Map<String, Object>> data = (List<Map<String, Object>>) page.getData();
	        if (data != null && data.size() > 0) {
	            data = data.stream().map(x -> {
	                String chronic = x.get("chronic").toString();
	                StringBuffer bf = new StringBuffer("");
	                Arrays.asList(chronic.split(",")).stream().forEach(i -> {
	                    if (!"0".equals(i)) {
	                        String chr_sql = "select survey_question_content from s_survey_question_k where order_id = " + i;
	                        List<Map<String, Object>> list = planDao.select(chr_sql);
	                        String name = list.get(0).get("survey_question_content").toString();
	                        bf.append(name).append(",");
	                    }
	                });
	                String chronic_name = bf.substring(0, bf.lastIndexOf(","));
	                x.put("chronic_name", chronic_name);
	                return x;
	            }).collect(Collectors.toList());
	        }
	        return page;
	}
///////////////////////////////高血压慢病档案CRUD开始////////////////////////////////////////////////////////////
	private static Logger logger = Logger.getLogger(DoctorAppService.class);

	/**
	 * 新增高血压慢病管理档案
	 * 
	 * @param hypertension
	 * @return
	 */
	@Log(name = "新增高血压慢病管理档案")
	@Transactional
	public long addNewHypertensionDocument(Hypertension hypertension) {
		long order_id = dao.addHypertension(hypertension);
		return order_id;
	}

	/**
	 * 删除高血压慢病管理档案
	 * 
	 * @param order_id
	 */
	@Log(name = "删除高血压慢病管理档案")
	@Transactional
	public void deleteHypertension(String order_id) {
		dao.deleteHypertension(order_id);

	}

	/**
	 * 新增高血压慢病管理档案-基本信息
	 * 
	 * @param data
	 */
	@Log(name = "填写基本信息")
	@Transactional
	public void addBasicInfo(Map<String, String[]> data) {
		List<HypertensionQuestion> questions = this.disposalData(data, "1");
		for (HypertensionQuestion question : questions) {
			List<HypertensionAnswer> answers = question.getAnswers();
			question.setAnswers(null);
			dao.saveQuestion(question);
			for (HypertensionAnswer answer : answers) {
				dao.saveAnswer(answer);
			}
		}
		String order_id = data.get("order_id")[0];
		dao.changeFlag1(order_id);
	}

	/**
	 * 修改高血压慢病管理档案-基本信息
	 * 
	 * @param data
	 */
	@Log(name = "新增或修改基本信息")
	@Transactional
	public void updateBasicInfo(Map<String, String[]> data) {
		List<HypertensionQuestion> questions = this.disposalData(data, "1");
		String hypertension_order_id = data.get("order_id")[0];
		for (HypertensionQuestion question : questions) {
			List<HypertensionAnswer> answers = question.getAnswers();
			question.setAnswers(null);
			dao.deleteQuestion(hypertension_order_id, "1");
			dao.saveQuestion(question);
			for (HypertensionAnswer answer : answers) {
				dao.deleteAnswer(hypertension_order_id, "1");
				dao.saveAnswer(answer);
			}
		}
		dao.changeFlag1(hypertension_order_id);
	}

	/**
	 * 新增辅助检查
	 * 
	 * @param data
	 */
	@Log(name = "填写辅助检查项目信息")
	@Transactional
	public void addCheckInfo(Map<String, String[]> data) {
		List<HypertensionQuestion> questions = this.disposalData(data, "2");
		for (HypertensionQuestion question : questions) {
			List<HypertensionAnswer> answers = question.getAnswers();
			question.setAnswers(null);
			dao.saveQuestion(question);
			for (HypertensionAnswer answer : answers) {
				dao.saveAnswer(answer);
			}
		}
		String order_id = data.get("order_id")[0];
		dao.changeFlag2(order_id);
	}

	/**
	 * 修改高血压慢病管理档案-辅助检查
	 * 
	 * @param data
	 */
	@Log(name = "新增或修改辅助检查项目信息")
	@Transactional
	public void updateCheckInfo(Map<String, String[]> data) {
		List<HypertensionQuestion> questions = this.disposalData(data, "2");
		String hypertension_order_id = data.get("order_id")[0];
		for (HypertensionQuestion question : questions) {
			List<HypertensionAnswer> answers = question.getAnswers();
			question.setAnswers(null);
			dao.deleteQuestion(hypertension_order_id, "2");
			dao.saveQuestion(question);
			for (HypertensionAnswer answer : answers) {
				dao.deleteAnswer(hypertension_order_id, "2");
				dao.saveAnswer(answer);
			}
		}
		dao.changeFlag2(hypertension_order_id);
	}

	/**
	 * 新增工作站
	 * 
	 * @param data
	 */
	@Log(name = "填写工作站信息")
	@Transactional
	public void addWorkstation(Map<String, String[]> data) {
		String order_id = data.get("order_id")[0];
		if (!dao.checkFlag(order_id)) {
			throw new RuntimeException("基础信息或辅助检查未完善");
		}
		List<HypertensionQuestion> questions = this.disposalData(data, "3");
		for (HypertensionQuestion question : questions) {
			List<HypertensionAnswer> answers = question.getAnswers();
			question.setAnswers(null);
			dao.saveQuestion(question);
			for (HypertensionAnswer answer : answers) {
				dao.saveAnswer(answer);
			}
		}
		dao.changeFlag3(order_id);
		dao.changeFlag(order_id);
	}

	/**
	 * 修改高血压慢病管理档案-工作站
	 * 
	 * @param data
	 */
	@Log(name = "新增或修改工作站信息")
	@Transactional
	public void updateWorkStation(Map<String, String[]> data) {
		List<HypertensionQuestion> questions = this.disposalData(data, "3");
		String hypertension_order_id = data.get("order_id")[0];
		for (HypertensionQuestion question : questions) {
			List<HypertensionAnswer> answers = question.getAnswers();
			question.setAnswers(null);
			dao.deleteQuestion(hypertension_order_id, "3");
			dao.saveQuestion(question);
			for (HypertensionAnswer answer : answers) {
				dao.deleteAnswer(hypertension_order_id, "3");
				dao.saveAnswer(answer);
			}
		}
		
		//更新疾病风险评估
		String sql = "update s_hypertension set risk = ?  where order_id = ? ";
		dao.execute(sql, data.get("risk")[0], data.get("order_id")[0]);
		
		//修改风险管理完成标志和档案完成标志
		dao.changeFlag3(hypertension_order_id);
		dao.changeFlag(hypertension_order_id);
		
		String patient_id = dao.getValue("select user_id from s_hypertension where order_id = ?", new Object[]{hypertension_order_id}, String.class);		
		dao.callProcedure(patient_id, hypertension_order_id);
		dao.track(patient_id);
	}

	/**
	 * 获取档案列表
	 * 
	 * @param patient_id
	 * @return
	 */
	@Log(name = "获取高血压档案列表")
	public List<Map<String, String>> getDocList(String patient_id) {
		List<Map<String, String>> hypertensionInfo = dao.getHypertension(patient_id);
		return hypertensionInfo;
	}

	/**
	 * 获取患者基本信息
	 * 
	 * @param patient_id
	 * @return
	 */
	@Log(name = "获取患者基本信息")
	public Map<String, String> getPatientInfo(String patient_id) {
		Map<String, String> patientInfo = dao.getPatientInfoById(patient_id);
		return patientInfo;
	}

	/**
	 * 获取档案详细信息(1:基本信息，2：辅助检查，3 工作站)
	 * 
	 * @param order_id
	 * @param question_region
	 * @return
	 */
	@Log(name = "获取档案详细信息")
	public Map<String, Object> getDocuMent(String order_id, String question_region) {
		Map<String, Object> info = new HashMap<>();
		Map<String, String> patientInfo = dao.getPatientInfoById(order_id);
		Map<String, String> relation = dao.getDocQuestion(order_id, question_region);
		Map<String, List<HypertensionAnswer>> answers = dao.getDocAnswer(order_id, question_region);
		Map<String, List<Map<String, String>>> result = new HashMap<>(relation.size());
		relation.forEach((k, v) -> {
			int size = answers.get(k).size();
			List<Map<String, String>> sub = new ArrayList<>(size);
			if (v == null) {
				List<HypertensionAnswer> temp = answers.get(k);
				if (size == 1) {
					Map<String, String> answer = new HashMap<>(1);
					String value = temp.get(0).getAnswer_code() == null ? temp.get(0).getAnswer_text()
							: temp.get(0).getAnswer_code();
					answer.put(k, value);
					sub.add(answer);
				}
				if (size > 1) {
					Format format = new DecimalFormat("00");
					for (int i = 1; i <= size; i++) {
						String group_id = format.format(i);
						Map<String, String> answer = new HashMap<>(2);
						String value = temp.stream().filter(a -> a.getGroup_id().equals(group_id))
								.map(a -> a.getAnswer_code() == null ? a.getAnswer_text() : a.getAnswer_code())
								.findFirst().get();
						answer.put(k, value);
						sub.add(answer);
					}
				}

			}
			if (v != null) {
				List<HypertensionAnswer> temp1 = answers.get(k);
				List<HypertensionAnswer> temp2 = answers.get(v);
				if (size == 1) {
					Map<String, String> answer = new HashMap<>(2);
					String value1 = temp1.get(0).getAnswer_code() == null ? temp1.get(0).getAnswer_text()
							: temp1.get(0).getAnswer_code();
					String value2 = temp2.get(0).getAnswer_code() == null ? temp2.get(0).getAnswer_text()
							: temp2.get(0).getAnswer_code();
					answer.put(k, value1);
					answer.put(v, value2);
					sub.add(answer);
				}
				if (size > 1) {
					Format format = new DecimalFormat("00");
					for (int i = 1; i <= size; i++) {
						String group_id = format.format(i);
						Map<String, String> answer = new HashMap<>(2);
						String value1 = temp1.stream().filter(a -> a.getGroup_id().equals(group_id))
								.map(a -> a.getAnswer_code() == null ? a.getAnswer_text() : a.getAnswer_code())
								.findFirst().get();
						String value2 = temp2.stream().filter(a -> a.getGroup_id().equals(group_id))
								.map(a -> a.getAnswer_code() == null ? a.getAnswer_text() : a.getAnswer_code())
								.findFirst().get();
						answer.put(k, value1);
						answer.put(v, value2);
						sub.add(answer);
					}
				}
			}
			result.put(k, sub);
		});
		info.put("patientInfo", patientInfo);
		info.put("documentInfo", result);
		return info;
	}
	
	public Map<String,String> getDocInfo(String order_id){
		return dao.getDocInfo(order_id);
	}

	/*****************************************************************************************************/

	/**
	 * 原始数据清洗
	 * 
	 * @param raw
	 * @return
	 */
	public Map<String, String[]> getHypertensionData(Map<String, String[]> raw) {
		Map<String, String[]> data = new HashMap<>(raw.size());
		for (Map.Entry<String, String[]> entry : raw.entrySet()) {
			String key = entry.getKey();
			String[] value = entry.getValue();
			long count = Stream.of(value).filter(s -> s.trim().length()>0).count();
			if (count != 0) {
				data.put(key, value);
			}
		}
		return data;
	}

	/**
	 * 必填项校验
	 * 
	 * @param data
	 */
	public void check(Map<String, String[]> data, String question_region) {
		List<String> compare = dao.getAllQuestions().stream()
				.filter(m -> m.get("question_region").equals(question_region))
				.filter(m -> m.get("required").equals("1")).map(m -> m.get("order_id")).collect(Collectors.toList());
		List<String> error = new ArrayList<>();
		for (String s : compare) {
			if (data.get(s) == null) {
				error.add(s);
			}
		}
		if (error.size() > 0) {
			throw new RuntimeException(error.toString() + ":参数为空");
		}
	}

	/**
	 * 将原始数据组合成规范数据
	 * 
	 * @param data
	 * @param question_region
	 * @return
	 */
	public List<HypertensionQuestion> disposalData(Map<String, String[]> data, String question_region) {

		// 问题码表
		Map<String, List<Map<String, String>>> questionList = dao.getAllQuestions().stream()
				.collect(Collectors.groupingBy(m -> m.get("order_id")));

		// 答案码表
		Map<String, List<Map<String, String>>> answerList = dao.getAllAnswers().stream()
				.collect(Collectors.groupingBy(m -> m.get("question_order_id") + ":" + m.get("answer_code")));

		String create_date = DateUtil.dateFormat(new Date(), "yyyy-MM-dd HH:mm:ss");
		String order_id = data.get("order_id")[0];
		List<HypertensionQuestion> questions = new ArrayList<>();
		for (Map.Entry<String, String[]> entry : data.entrySet()) {

			String key = entry.getKey();
			String[] values = entry.getValue();
			List<HypertensionAnswer> answers = new ArrayList<>();
			HypertensionQuestion question = new HypertensionQuestion();

			question.setHypertension_order_id(order_id);
			question.setQuestion_region(question_region);
			question.setCreate_date(create_date);

			String group_id = null;
			String question_order_id = null;
			if (key.equals("order_id")||key.equals("risk")) {
				continue;
			}
			if (key.length() == 6) {
				question_order_id = key;
			}
			if (key.length() == 8) {
				question_order_id = key.substring(0, 6);
				group_id = key.substring(6);
			}

			question.setQuestion_order_id(question_order_id);
			question.setParent_id(questionList.get(question_order_id).get(0).get("parent_id"));
			question.setQuestion_content(questionList.get(question_order_id).get(0).get("question_content"));
			for (String value : values) {
				HypertensionAnswer answer = new HypertensionAnswer();
				answer.setHypertension_order_id(order_id);
				answer.setQuestion_order_id(question_order_id);
				answer.setGroup_id(group_id);
				answer.setQuestion_region(question_region);
				String question_type = questionList.get(question_order_id).get(0).get("question_type");

				// 单选或多选
				if (question_type.equals("1") || question_type.equals("2")) {
					answer.setAnswer_code(value);
					if (answerList.get(question_order_id + ":" + value) != null) {
						answer.setAnswer_content(
								answerList.get(question_order_id + ":" + value).get(0).get("answer_content"));
					}
				}
				// 手写
				else if (question_type.equals("3")) {
					answer.setAnswer_text(value);
				}
				answer.setCreate_date(create_date);
				answers.add(answer);
			}
			question.setAnswers(answers);
			questions.add(question);
		}
		return questions;
	}
///////////////////////////////高血压慢病档案CRUD结束////////////////////////////////////////////////////////////
	
	/**
	 * 
	 * @Title: addDoc @Description: 向糖尿病主表内新添加记录 @param user_id @return @throws
	 */
	@Transactional
	public InfoJson addDoc(long user_id) {
		Map<String, Object> map = new HashMap<String, Object>();		
		map.put("user_id", user_id);
		map.put("create_time", new Date());
		long order_id = dao.addDoc(map);
		
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap = dao.getDocBasicInfo(order_id);
		
		return InfoJson.setSucc(order_id);
	}

	@Transactional
	@SuppressWarnings("rawtypes")
	public InfoJson addAnswers(Map<String, List<Object>> answers) {
		Date date = new Date();
		String order_id = String.valueOf(answers.remove("order_id").get(0));
		String scope_flag = String.valueOf(answers.remove("scope_flag").get(0)); // 获取当前添加的scope_flag
		String type = null;
		if (scope_flag.equals("3")) {
			type = String.valueOf(answers.remove("type").get(0)); // 糖尿病类型
		}
		// 选项码表
		Map<String, Object> k_options = dao.getKOptions(scope_flag).stream()
				.collect(Collectors.toMap(s -> String.valueOf(s.get("order_id")), s -> {
					s.remove("order_id");
					return s;
				}));
		// 问题码表
		Map<String, Map<String, Object>> k_questions = dao.getKQuestions(scope_flag).stream()
				.collect(Collectors.toMap(s -> String.valueOf(s.get("order_id")), s -> {
					s.remove("order_id");
					return s;
				}));

		// List<Object[]> questionList = new LinkedList<Object[]>();

		// 循环保存答案和问题
		answers.forEach((k, v) -> {
			v.forEach(s -> {
				if (!StringUtil.isEmpty(String.valueOf(s))||k.equals("1103")) {
					String question_id = (k.split("-"))[0];
					int question_index = 0;
					if (k.split("-").length == 2) {
						question_index = Integer.parseInt((k.split("-"))[1]);
					}
					Map<String, Object> questionMap = k_questions.get(question_id);
					questionMap.remove("parent_id");
					questionMap.remove("table_id");
					questionMap.remove("is_require");
					questionMap.put("dm_order_id", order_id);
					questionMap.put("question_k_order_id", question_id);
					questionMap.put("question_index", question_index);
					questionMap.put("create_time", date);

					// questionList.add(new Object[] { order_id, question_id,
					// question_index, date });

					long question_order_id = dao.addQuestions(questionMap);
					Map<String, Object> answerMap = new HashMap<String, Object>();
					answerMap.put("dm_order_id", order_id);
					if (!String.valueOf(questionMap.get("question_type")).equals("3")) {
						answerMap.put("option_order_id", s);
						answerMap.put("option_content", ((Map) k_options.get(String.valueOf(s))).get("option_content"));
					} else {
						answerMap.put("option_content", s);
					}
					// 计算BMI值并保存
					if (question_id.equals("1103")) {
						float user_weight = Float.parseFloat(String.valueOf(answers.get("1101").get(0)));
						float user_height = Float.parseFloat(String.valueOf(answers.get("1100").get(0)));
						DecimalFormat dformat = new DecimalFormat();
						dformat.applyPattern("#.00");
						answerMap.put("option_content",
								dformat.format(user_weight / (user_height * user_height) * 10000));
					}
					answerMap.put("create_time", date);
					answerMap.put("question_order_id", question_order_id);
					dao.addAnswers(answerMap);
				}
			});

			// diabetesDocDao.batchAddQuestions(
			// new String[] { "dm_order_id", "question_k_order_id",
			// "question_index", "create_time" },
			// questionList);
			// System.out.println(order_id);
			//
			// List<Map<String, Object>> questionList1 =
			// diabetesDocDao.getQuestionsByOrderId(Long.valueOf(order_id));
			// System.out.println(questionList1.size());
			// System.out.println(questionList1);
			//
			// List<Object[]> answerList = new LinkedList<Object[]>();
			// questionList1.forEach(s -> {
			// List<Object> answer = new ArrayList<Object>();
			// if (!String.valueOf(s.get("question_type")).equals("0")) {
			// answer = answers.get("-" + s.get("question_index"));
			// } else {
			// answer = answers.get(s.get("question_k_order_id"));
			// }
			// answer.forEach(s1 -> {
			// if (!String.valueOf(s.get("question_type")).equals("3")) {
			// answerList.add(new Object[] { order_id, s.get("order_id"), s1,
			// k_options.get(s1), date });
			// } else {
			// answerList.add(new Object[] { order_id, s.get("order_id"), null,
			// s1, date });
			// }
			// });
			// });
			// diabetesDocDao.batchAddAnswers(new String[] { "dm_order_id",
			// "question_order_id", "option_oder_id",
			// "option_content", "create_time" }, answerList);
		});
		Map<String, Object> diabetesDoc = dao.getDocBasicInfo(Long.valueOf(order_id));
		// 根据scope_flag值更改t_chronic_dm主表内的状态值
		switch (scope_flag) {
		case "1":
			diabetesDoc.put("base_status", 1);
			break;
		case "2":
			diabetesDoc.put("image_status", 1);
			break;
		case "3":
			diabetesDoc.put("station_status", 1);
			diabetesDoc.put("type", type);
			break;
		default:
			break;
		}
		if (diabetesDoc.get("base_status").equals(1) && diabetesDoc.get("image_status").equals(1)
				&& diabetesDoc.get("station_status").equals(1)) {
			diabetesDoc.put("status", 1);
		}
		int result = dao.updateDoc(diabetesDoc);
		if (result > 0) {
			String patient_id = dao.getValue("select user_id from s_hypertension where order_id = ?", new Object[]{order_id}, String.class);
			dao.callProcedure2(patient_id, order_id);
			dao.track2(patient_id);			
			return InfoJson.setSucc(diabetesDoc);
		}
		return InfoJson.setFaile();
	}

	@Transactional
	public InfoJson update(Map<String, List<Object>> answers) {
		String order_id = String.valueOf(answers.get("order_id").get(0));
		String scope_flag = String.valueOf(answers.get("scope_flag").get(0)); // 获取当前添加的scope_flag
		/*
		 * 编辑前先将同模块的问题以及答案删除
		 */
		dao.deleteAnswers(Long.parseLong(order_id), Integer.parseInt(scope_flag));
		return addAnswers(answers);
	}

	public InfoJson getAnswers(long order_id, String scope_flag) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("doc", dao.getBasicDoc(order_id));
		// 如果是基础信息模块，向basic Map中添加用户基础信息
		if (scope_flag.equals("1")) {
			Map<String, Object> basicMap = dao.getBasicInfo(order_id);
			if(basicMap.get("user_card")!=null){
				IdCard card = IdCard.of(basicMap.get("user_card").toString());
				if(card.flag){
					basicMap.put("user_sex", card.getSex()==1?"200001":"200002");
					basicMap.put("user_birthday", card.getBirthday());
					basicMap.put("user_age", card.getAge());
				}
			}
			/*basicMap.put("user_card", basicMap.get("user_card"));
			basicMap.put("user_phone", basicMap.get("user_phone"));*/
			retMap.put("basic", basicMap);
		} else {
			retMap.put("basic", null);
		}
		List<Map<String, Object>> answerList = dao.getAnswers(order_id, scope_flag);
		retMap.put("answer", answerList.stream().collect(Collectors.groupingBy(s -> "t" + s.remove("table_id"),
				Collectors.groupingBy(m -> "c" + m.remove("question_index")))));
		return InfoJson.setSucc(retMap);
	}

	public InfoJson getOption() {
		List<Map<String, Object>> optionList = dao.getKOptions(null);
		Map<String, List<Map<String, Object>>> retMap = optionList.stream()
				.collect(Collectors.groupingBy(s -> String.valueOf(s.remove("question_k_order_id"))));
		return InfoJson.setSucc(retMap);
	}

	/**
	 * 
	 * @Title: getBasicDoc @Description: 用来获取糖尿病档案填写完成的状态 @param
	 *         order_id @return @throws
	 */
	public InfoJson getBasicDoc(long order_id) {
		return InfoJson.setSucc(dao.getBasicDoc(order_id));
	}
	
	public List<Map<String,Object>> getDocList2(String patient_id){
		return dao.getDocList(patient_id);
		
	}
	
	
	
	
	
	
	

}
