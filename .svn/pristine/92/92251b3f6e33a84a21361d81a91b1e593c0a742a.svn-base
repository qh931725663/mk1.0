package com.haaa.cloudmedical.app.equipment.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.InfoJson;
import com.haaa.cloudmedical.common.service.UnicodeService;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.common.util.NumberUtil;
import com.haaa.cloudmedical.dao.equipment.BloodSugarDao;
import com.haaa.cloudmedical.entity.BloodSugar;
import com.haaa.cloudmedical.entity.EquipmentUse;

/**
 * 
 * 
 * @author Bowen Fan
 *
 */
@Service
public class BloodSugarService {

	@Resource
	private BloodSugarDao bloodSugarDao;

	@Resource
	private UnicodeService unicodeService;

	/**
	 * 
	 * @Title: add @Description: 添加血糖信息 @param equipmentUse @param
	 *         bloodSugar @return InfoJson 返回类型 @throws
	 */
	@Transactional
	public InfoJson add(EquipmentUse equipmentUse, BloodSugar bloodSugar) {
		InfoJson infoJson = new InfoJson();
		Date date = new Date();
		equipmentUse.setCreate_date(date);
		equipmentUse.setEquipment_name("blood_sugar");
		equipmentUse.setEquipment_property_order_id(Constant.BLOOD_SUGAR_ID);
		Long id = (Long) bloodSugarDao.insertAndGetKey(equipmentUse, "c_equipment_use");
		bloodSugar.setCreate_date(date);
		bloodSugar.setEquipment_use_order_id(String.valueOf(id));
		long result = (Long) bloodSugarDao.insertAndGetKey(bloodSugar, "c_blood_sugar");
		Map<String, Object> map = bloodSugarDao.queryDetailById(result, "c_blood_sugar");
		map.put("datetime", DateUtil.DateFormat(map.remove("create_date"), "yyyy-MM-dd"));
		infoJson.setData(map);
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: queryRecent @Description: app端查询曲线数据 (android IOS) @param
	 *         user_id @param period @return InfoJson 返回类型 @throws
	 */
	public InfoJson queryRecent(long user_id, int period, int days) {
		InfoJson infoJson = new InfoJson();
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		if (period % 100000 == 0) {
			for (int i = 1; i < 7; i++) {
				Map<String, Object> data = new HashMap<String, Object>();
				if (bloodSugarDao.queryRecent(user_id, period + i, 90).size() != 0) {
					infoJson.setCount(1);
					List<Map<String, Object>> list = bloodSugarDao.queryRecent(user_id, period + i, days);
					for (Map<String, Object> map2 : list) {
						map2.put("BloodSugar", (NumberUtil.decimalFormat((float) map2.remove("BloodSugar"), 1)));
					}
					data.put("period", period + i);
					List<Map<String, Object>> maps = bloodSugarDao.queryMonth(user_id);
					data.put("size", maps.size());
					data.put("list", list);
					dataList.add(data);
				}

			}
			infoJson.setData(dataList);
		} else {
			Map<String, Object> data = new HashMap<String, Object>();
			if (bloodSugarDao.queryRecent(user_id, period, 90).size() != 0) {
				infoJson.setCount(1);
				List<Map<String, Object>> list = bloodSugarDao.queryRecent(user_id, period, days);
				for (Map<String, Object> map2 : list) {
					map2.put("BloodSugar", (NumberUtil.decimalFormat((float) map2.remove("BloodSugar"), 1)));
				}
				data.put("period", period);
				List<Map<String, Object>> maps = bloodSugarDao.queryMonth(user_id);
				data.put("size", maps.size());
				data.put("list", list);
				infoJson.setData(data);
			}
		}
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: queryRecent @Description: app端查询曲线数据（IOS） @param user_id @param
	 *         period @return InfoJson 返回类型 @throws
	 */
	public InfoJson queryRecent1(long user_id, int period, int days) {
		InfoJson infoJson = new InfoJson();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		if (period % 100000 == 0) {
			for (int i = 1; i < 7; i++) {
				if (bloodSugarDao.queryRecent(user_id, period + i, days).size() != 0) {
					infoJson.setCount(infoJson.getCount() + 1);
					List<Map<String, Object>> list = bloodSugarDao.queryRecent(user_id, period + i, days);
					for (Map<String, Object> map2 : list) {
						map2.put("BloodSugar", (NumberUtil.decimalFormat((float) map2.remove("BloodSugar"), 1)));
					}
					map.put(String.valueOf(period), list);
					List<Map<String, Object>> maps = bloodSugarDao.queryMonth(user_id);
					map.put("size" + String.valueOf(period), maps.size());
				}
			}
		} else {
			Map<String, Object> data = new HashMap<String, Object>();
			if (bloodSugarDao.queryRecent(user_id, period, days).size() != 0) {
				infoJson.setCount(1);
				List<Map<String, Object>> list = bloodSugarDao.queryRecent(user_id, period, days);
				for (Map<String, Object> map2 : list) {
					map2.put("BloodSugar", (NumberUtil.decimalFormat((float) map2.remove("BloodSugar"), 1)));
				}
				map.put(String.valueOf(period), list);
				List<Map<String, Object>> maps = bloodSugarDao.queryMonth(user_id);
				map.put("size" + String.valueOf(period), maps.size());
			}
		}
		infoJson.setData(map);
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: pageQuery @Description: 分页查询，按月分页查询 @param user_id @param
	 *         year_month @param pageno @param pagesize @return @throws
	 */
	public InfoJson pageQuery(long user_id, String year_month, int pageno, int pagesize) {
		InfoJson infoJson = new InfoJson();
		List<Map<String, Object>> dataList = null;
		if (year_month != null) {
			dataList = bloodSugarDao.queryByMonth(user_id, year_month, pageno, pagesize);
		} else {
			dataList = bloodSugarDao.pageQuery(user_id, pageno, pagesize);
		}
		if (dataList.size() > 0) {
			Iterator<Map<String, Object>> iterator = dataList.iterator();
			Map<String, Object> map = iterator.next();
			Date date = (Date) map.get("datetime");
			String yearMonth = DateUtil.dateFormat(date, "yyyy-MM");
			String monthDay = DateUtil.dateFormat(date, "MM-dd");
			String tempYearMonth = null;
			List<Object> monthList = new ArrayList<Object>();
			outer: while (true) {
				if (map == null) {
					break;
				}
				Map<String, Object> monthMap = new HashMap<String, Object>();
				tempYearMonth = yearMonth;
				monthList.add(monthMap);
				monthMap.put("yearmonth", yearMonth);
				List<Object> timeList = new ArrayList<Object>();
				while (tempYearMonth.equals(yearMonth)) {
					monthMap.put("timelist", timeList);
					Map<String, Object> timeMap = new HashMap<String, Object>();
					map.put("datetime", DateUtil.dateFormat(date, "MM-dd HH:mm"));
					map.put("BloodSugar", (NumberUtil.decimalFormat((float) map.remove("BloodSugar"), 1)));
					timeMap.put("singledata", map);
					int hour = DateUtil.getHour(date);
					int period = periodDefine(hour);
					timeMap.put("period", period);
					timeList.add(timeMap);
					if (iterator.hasNext()) {
						map = iterator.next();
						date = (Date) map.get("datetime");
						yearMonth = DateUtil.dateFormat(date, "yyyy-MM");
						monthDay = DateUtil.dateFormat(date, "MM-dd");
					} else {
						break outer;
					}

				}
			}
			infoJson.setData(monthList);
		}
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: periodDefine @Description: 根据查询的时间 判断早中晚时间段，-1上午，0下午，1晚上 @param
	 *         hour @return @throws
	 */
	private int periodDefine(int hour) {
		int period = 0;
		if (hour < Constant.MORNING_END && hour >= 0) {
			period = -1;
		} else if (hour < Constant.NIGHT_BEGIN) {
			period = 0;
		} else {
			period = 1;
		}
		return period;
	}

	/**
	 * 查询具有数据的月份
	 * 
	 * @param user_id
	 * @return
	 */
	public InfoJson queryMonth(Long user_id) {
		InfoJson infoJson = new InfoJson();
		infoJson.setData(bloodSugarDao.queryMonth(user_id));
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * app端曲线查询统计功能，统计所有数据
	 * 
	 * @param user_id
	 * @return
	 * @throws Exception
	 */
	public InfoJson dataStat(long user_id, int period, Integer days) {
		InfoJson infoJson = new InfoJson();
		Map<String, Integer> statMap = new HashMap<String, Integer>();
		int high = 0;
		int low = 0;
		int normal = 0;
		int peroid = 0;
		float bloodsugar = 0;
		List<Map<String, Object>> data = bloodSugarDao.queryRecent(user_id, period, days);

		for (Map<String, Object> map : data) {
			peroid = (Integer) map.get("measurement_period");
			bloodsugar = (Float) map.get("BloodSugar");
			// 空腹
			if (peroid == Constant.EMPTY_STOMACH) {
				if (bloodsugar < Constant.lOW_FBG) {
					low++;
				} else if (bloodsugar > Constant.HIGH_FBG) {
					high++;
				} else {
					normal++;
				}
			}
			// 睡前
			else if (peroid == Constant.BEFORE_SLEEP) {
				if (bloodsugar < Constant.lOW_POST_BG) {
					low++;
				} else if (bloodsugar > Constant.HIGH_POST_BG) {
					high++;
				} else {
					normal++;
				}
			}
			// 饭后
			else if (peroid == Constant.AFTER_BREAKFAST || peroid == Constant.AFTER_DINNER
					|| peroid == Constant.AFTER_LUNCH) {
				if (bloodsugar < Constant.lOW_POST_BG) {
					low++;
				} else if (bloodsugar > Constant.HIGH_POST_BG) {
					high++;
				} else {
					normal++;
				}

			} else if (peroid == Constant.BEFORE_DINNER || peroid == Constant.BEFORE_LUNCH) {// 饭前
				if (bloodsugar < Constant.lOW_PRE_BG) {
					low++;
				} else if (bloodsugar > Constant.HIGH_PRE_BG) {
					high++;
				} else {
					normal++;
				}
			}
		}
		statMap.put("high", high);
		statMap.put("low", low);
		statMap.put("normal", normal);
		infoJson.setData(statMap);
		infoJson.setStatus(1);
		return infoJson;
	}

}
