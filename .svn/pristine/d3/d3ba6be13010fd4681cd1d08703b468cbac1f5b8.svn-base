package com.haaa.cloudmedical.platform.user.controller;

import java.util.Date;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.Page;
import com.haaa.cloudmedical.common.entity.ResponseDTO;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.common.util.MD5Util;
import com.haaa.cloudmedical.entity.Department;
import com.haaa.cloudmedical.entity.Doctor;
import com.haaa.cloudmedical.entity.Hospital;
import com.haaa.cloudmedical.entity.Manager;
import com.haaa.cloudmedical.entity.Patient;
import com.haaa.cloudmedical.entity.User;
import com.haaa.cloudmedical.platform.user.service.UserPlatformService;



@Controller
@RequestMapping("/user-platform")
public class UserPlatFormController {
	
	@Autowired
	private UserPlatformService service;
	
	/**
	 * 检验手机号码是否已注册
	 * @param user_phone
	 * @param flag
	 * @return
	 */
	@RequestMapping("/exists.action")
	@ResponseBody
	public boolean contain(String user_phone,String type){
		boolean flag = false;
		flag = service.contain(user_phone,type);
		return flag;
	}
	/**
	 * 检验身份证是否已注册
	 * @param user_phone
	 * @param flag
	 * @return
	 */
	@RequestMapping("/checkUserCard.action")
	@ResponseBody
	public boolean containUserCard(String user_card,String type){
		boolean flag = false;
		flag = service.containUserCard(user_card,type);
		return flag;
	}
	
	/**
	 * 登录
	 * @param user_phone
	 * @param user_pwd
	 * @return
	 */
	@RequestMapping("/login.action")
	@ResponseBody
	public Object login(String user_phone,String user_pwd){
		ResponseDTO dto = service.login(user_phone,  MD5Util.encode(user_pwd));
		return dto;		
	}
	
	/**
	 * 分页查询
	 * @param user
	 * @param patient
	 * @param doctor
	 * @param department
	 * @param hospital
	 * @param startDate
	 * @param endDate
	 * @param c_menu_code
	 * @param pageno
	 * @return
	 */
	@RequestMapping("/gridquery.action")
	@ResponseBody
	public Object query(Manager manager,User user,Doctor doctor,Department department,Hospital hospital,String startDate,String endDate,String c_menu_code,Integer pageno){
		Page page = null;
		if(pageno==null||"".equals(pageno))
			pageno=1;
		if(c_menu_code.equals(Constant.MENU_CODE_ACCOUNT)){
			page=service.query(manager, pageno);
		}else if(c_menu_code.equals(Constant.MENU_CODE_MEMBER)||c_menu_code.equals(Constant.MENU_CODE_DATA)){
			page=service.query(user, doctor, startDate, endDate, pageno);
		}else if(c_menu_code.equals(Constant.MENU_CODE_DOCTOR)){
			page=service.query(user, doctor, department, hospital, startDate, endDate, pageno);
		}
		return page;
	}
	
	/**
	 * 当前用户信息查询
	 * @param user_phone
	 * @param c_menu_code
	 * @return
	 */
	@RequestMapping("/query.action")
	@ResponseBody
	public Object query(String user_id,String c_menu_code){
		Map<String,Object> map =service.query(user_id,c_menu_code);
		return map;
	}
	
	/**
	 * 修改用户信息
	 * @return
	 */
	@RequestMapping("/modify.action")
	@ResponseBody
	public Object modify(Manager manager,User user,Patient patient,Doctor doctor,String c_menu_code){
		boolean flag = false;
		if(c_menu_code.equals(Constant.MENU_CODE_ACCOUNT)){
			if(manager.getUser_pwd()!=null&&!"".equals(manager.getUser_pwd()))
				user.setUser_pwd(MD5Util.encode(user.getUser_pwd()));
			flag =service.update(manager);
		}			
		else if(c_menu_code.equals(Constant.MENU_CODE_MEMBER))
			flag =service.update(user,patient);
		else if(c_menu_code.equals(Constant.MENU_CODE_DOCTOR))
			flag =service.update(user,doctor);
		return flag;
	}
	/**
	 * 新增用户
	 * @return
	 */
	@RequestMapping("/add.action")
	@ResponseBody
	public Object add(Manager manager,User user,Patient patient,Doctor doctor,String c_menu_code){
		String date = DateUtil.DateFormat(new Date(), "yyyy-MM-dd HH:mm:ss");
		ResponseDTO dto  =null;
		if(c_menu_code.equals(Constant.MENU_CODE_ACCOUNT)){
			manager.setUser_pwd(MD5Util.encode(manager.getUser_pwd()));
			manager.setCreate_date(date);
			dto = service.addUser(manager);
		}
		else if(c_menu_code.equals(Constant.MENU_CODE_MEMBER)){
			user.setCreate_date(date);
			patient.setCreate_date(date);
			dto = service.addUser(user,patient);
		}
		else if(c_menu_code.equals(Constant.MENU_CODE_DOCTOR)){
			user.setCreate_date(date);
			doctor.setCreate_date(date);
			dto = service.addUser(user,doctor);			
		}
		return dto;
	}
	/**
	 * 修改密码
	 * @return
	 */
	@RequestMapping("/password.action")
	@ResponseBody
	public Object save(String user_phone,String user_pwd){
		service.password(user_phone, MD5Util.encode(user_pwd));
		return null;
	}
	
	/**
	 * 修改用户状态
	 * @param user_id
	 * @param flag
	 * @return
	 */
	@RequestMapping("/userflag.action")
	@ResponseBody
	public boolean modify(String user_id,String user_flag){
		boolean flag = service.modify(user_id, user_flag);
		return flag;
		
	}
}
