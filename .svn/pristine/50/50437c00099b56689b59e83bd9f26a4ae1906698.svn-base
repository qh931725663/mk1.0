package com.haaa.cloudmedical.dao;

import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import com.haaa.cloudmedical.common.dao.BaseTemplateDao;
import com.haaa.cloudmedical.common.entity.Constant;
/**
 * 
 * @author Owen
 *
 */
@Repository
public class ChronicPlanDao extends BaseTemplateDao {

	// object转换为字符串
	public Map<String, String> obj2Str(Map<String, Object> map) {
		Map<String, String> result = new HashMap<>();
		map.forEach((key,value)->result.put(key, value==null?null:String.valueOf(value)));
		return result;
	}

	// object转换为字符串
	public List<Map<String, String>> obj2Str(List<Map<String, Object>> list) {
		return list.stream().collect(ArrayList::new, (l,t)->l.add(obj2Str(t)), ArrayList::addAll);
	}

	// 管理计划列表
	public List<Map<String, String>> getChronicPlanList(String patient_id, String type) {
		String sql = "select order_id,plan_level,findname(plan_level) level_name,type,status,plan_year,"
				+ "date_format(plan_begin,'%Y-%m-%d') plan_begin,date_format(plan_end,'%Y-%m-%d') plan_end,create_by "
				+ "from p_plan where user_id = ? and type = ?";
		List<Map<String, Object>> list = this.select(sql, new Object[] { patient_id, type });
		return obj2Str(list);
	}
	
	// 管理计划详情
	public List<Map<String, String>> getChronicPlanDetail(String order_id) {
		String sql = "select order_id,user_id,plan_order_id,plan_dict_order_id,plan_item_type,plan_item_name,plan_name,"
				+ "(select plan_content from p_plan_dict where order_id = plan_dict_order_id) plan_content,plan_num,real_num,valid_num,"
				+ "(select is_require from p_plan_dict where order_id = plan_dict_order_id) is_require,"
				+ "plan_rate,up2std_num,up2std_rate,avg_value,rep_year,rep_type "
				+ "from p_plan_report where plan_order_id = ? ";
		List<Map<String, Object>> result = this.select(sql, new Object[] { order_id });
		for (Map<String, Object> map : result) {
			map.put("plan_rate", Math.round(Double.parseDouble(map.get("plan_rate").toString())*100));
			map.put("up2std_rate", Math.round(Double.parseDouble(map.get("up2std_rate").toString())*100));
		}
		return obj2Str(result);
	}
	
	// 管理计划详情
		public Map<String, String> getChronicPlanInfo(String order_id) {
			String sql = "select order_id,user_id,plan_level,findname(plan_level) level_name,type,status,plan_year,plan_begin,"
					+ "plan_end,create_by,create_date from p_plan where order_id = ? ";
			Map<String, Object> result = this.get(sql, new Object[] { order_id });
			return obj2Str(result);
		}
	
	/**
     * @description 用于计划跟踪列表展示
     * @param user_id
     * @param order_id
     * @return
     */
	public List<Map<String, Object>> getPlanTrackItems(String plan_id, String dic_order_id) {
		String sql ="SELECT c.order_id cid,i.order_id iid,c.check_time check_time, c.option_name, c.option_value,c.option_unit "
				+ "FROM p_plan p "
				+ "LEFT JOIN p_plan_item i ON p.order_id = i.plan_order_id "
				+ "LEFT JOIN p_plan_dict d on i.dict_order_id = d.order_id "
				+ "LEFT JOIN p_plan_item_content c ON i.order_id = c.item_order_id "
				+ "WHERE p.order_id = ? AND d.order_id = ?  ";
		 return jdbcTemplate.queryForList(sql.toString(),plan_id,dic_order_id);
	}

	public List<Map<String, Object>>  getAllIterms(String plan_order_id,String dict_order_id) {
		String sql ="SELECT i.order_id item_order_id,date_format(i.create_date,'%Y-%m-%d') create_time "
				+ "FROM p_plan_item i "
				+ "where i.plan_order_id = ? AND i.dict_order_id=? "
				+ "ORDER BY i.order_id DESC";
		 return jdbcTemplate.queryForList(sql.toString(),plan_order_id,dict_order_id);
	}
	
	public List<Map<String, Object>>  getAllOptionByIterm(BigInteger iterm_order_id) {
		String sql ="SELECT c.option_name,c.option_value,c.option_unit "
				+ "FROM p_plan_item_content c "
				+ "WHERE c.item_order_id = ?";
		 return jdbcTemplate.queryForList(sql.toString(),iterm_order_id);
	}

	/**
	 * @description 添加item数据并返回主键
	 * @param item_content_id
	 * @return
	 */
	public Long addItem(String plan_order_id,String plan_dic_order_id,String user_id,String create_date,String create_by) {
		long key = 0;
		String sql ="INSERT INTO p_plan_item (plan_order_id,dict_order_id,user_id,create_date,create_by)  VALUES (?,?,?,?,?)";
		System.out.println(sql);
		jdbcTemplate.update(sql.toString(), plan_order_id,plan_dic_order_id,user_id,create_date,create_by);
		sql = "select LAST_INSERT_ID()";
		return jdbcTemplate.queryForObject(sql, Long.class);
		 
	}
	/**
	 * @description 通过管理计划的id获得user_id
	 * @return
	 */
	public BigInteger getUserId(String plan_order_id) {
		String sql ="SELECT p.user_id from p_plan p WHERE p.order_id =?";
		return jdbcTemplate.queryForObject(sql, BigInteger.class,plan_order_id);
	}	
	
	
	
	
	/**
	 * @description 删除某次检测记录的iterm表记录
	 * @param item_order_id
	 */
	public void deletePlanItems(String item_order_id) {
		String sql ="DELETE  "
				+ "FROM p_plan_item "
				+ "WHERE order_id =?";
		jdbcTemplate.update(sql.toString(), item_order_id);
	}
	
	/**
	 * @description 删除某次检测记录的content表记录
	 * @param item_order_id
	 */
	public void deletePlanContents(String item_order_id) {
		String sql ="DELETE "
				+ "FROM p_plan_item_content "
				+ "WHERE item_order_id =377";
		jdbcTemplate.update(sql.toString(), item_order_id);

	}
	

	/**
	 * 调用存储过程进行不同类型的慢性病的检测数据同步共享
	 */
	public void callStoreSyn(String item_order_id) {
		String sql ="call proc_chronic_plan_sync("+item_order_id+")";		
		jdbcTemplate.execute(sql);
	}
	/**
	 * 调用存储过程更新report表
	 */
	public void callStoreUpd(String item_order_id) {
		String sql ="call proc_chronic_plan_report("+item_order_id+")";		
		jdbcTemplate.execute(sql);
	}
	
	
	
	//批量添加检测数据
	public void batchADD(List<Map> parseArray,String item_order_id) {
		List<Object[]> batch = new ArrayList<Object[]>();
		for (Map map : parseArray) {
			Object[] values = new Object[] {
					item_order_id,
					map.get("option_name"),
					map.get("option_value"),
					map.get("option_unit"),
					map.get("create_by"),
					map.get("check_time"),
					map.get("create_date")};
			batch.add(values);
		}
		int[] updateCounts = jdbcTemplate.batchUpdate(
				"INSERT INTO p_plan_item_content (item_order_id,option_name,option_value,option_unit,create_by,check_time,create_date) VALUES(?,?,?,?,?,?,?)",
				batch);
	}
	
	//////////////////////血糖数据查询////////////////////////////////////////////////////////////////////
	/**
	 * 近期数据查询 用于曲线图
	 * 
	 * @param user_id
	 * @param period
	 * @return
	 */
	public List<Map<String, Object>> queryRecent(long user_id, int period, int recent) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		StringBuffer sql = new StringBuffer(
				"SELECT A.order_id,DATE_FORMAT(A.create_date,'%Y-%m-%d %H:%i') datetime,B.BloodSugar ,findName(B.measurement_period) period,B.measurement_period "
						+ " FROM c_equipment_use A,c_blood_sugar B WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ");
		if (period == Constant.EMPTY) {
			sql.append("  AND B.measurement_period =? ");
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER) {
			sql.append("  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)");
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		}
		list.add(recent);
		sql.append(" AND DATE_SUB(NOW(),INTERVAL ? DAY) <A.create_date ORDER BY A.create_date DESC");
		return jdbcTemplate.queryForList(sql.toString(), list.toArray());
	}

	//查询有数据的年月
	public List<Map<String, Object>> queryMonth(long user_id, int period) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);	
		StringBuffer sql = new StringBuffer( "SELECT DISTINCT(DATE_FORMAT(A.create_date,'%Y-%m')) yearmonth "
				+ " FROM c_equipment_use A,c_blood_sugar B WHERE "
				+ " A.order_id=B.equipment_use_order_id AND A.user_id = ? AND "
				+ " DATE_SUB(NOW(),INTERVAL 1 YEAR) <=A.create_date ");
		if (period == Constant.EMPTY) {
			sql.append("  AND B.measurement_period =? ");
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER) {
			sql.append("  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)");
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		} 
		sql.append(" ORDER BY A.create_date DESC" );
		return jdbcTemplate.queryForList(sql.toString(), list.toArray());
	}
	//通过年月查询血糖数据
	public List<Map<String, Object>> queryByMonth(long user_id, String year_month,Integer period, int pageno, int pagesize) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);	
		list.add(year_month);	
		StringBuffer sql = new StringBuffer( "SELECT B.equipment_use_order_id,A.order_id,A.create_date datetime,B.BloodSugar ,findName(B.measurement_period) period "
				+ " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id  AND A.user_id = ? AND "
				+ " DATE_FORMAT(A.create_date,'%Y-%m')=? ");
		if (period == Constant.EMPTY) {
			sql.append("  AND B.measurement_period =? ");
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER) {
			sql.append("  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)");
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		} 
		sql.append("ORDER BY A.create_date DESC LIMIT ?,?");
		int start = (pageno - 1) * pagesize;
		list.add(start);
		list.add(pagesize);
		return jdbcTemplate.queryForList(sql.toString(), list.toArray());
	}
	//血糖分页数据的查询
	public List<Map<String, Object>> pageQuery(long user_id,int period,int pageno, int pagesize) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		StringBuffer sql = new StringBuffer( "SELECT B.equipment_use_order_id,A.order_id,A.create_date datetime,B.BloodSugar BloodSugar,findName(B.measurement_period) period "
				+ " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ?");

		if (period == Constant.EMPTY) {
			sql.append("  AND B.measurement_period =? ");
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER) {
			sql.append("  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)");
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		}		
		sql.append(" ORDER BY A.create_date DESC LIMIT ?,?");
		int start = (pageno - 1) * pagesize;
		list.add(start);
		list.add(pagesize);
		return jdbcTemplate.queryForList(sql.toString(), list.toArray());
	}
	/**
	 * 通过月份获得分页数据
	 */
	public int pageNumberByMonth(Long user_id, String yearMonth, int period, int pagesize) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		list.add(yearMonth);
		StringBuffer sql = new StringBuffer("SELECT COUNT(*) " + " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? AND DATE_FORMAT(A.create_date,'%Y-%m')=?  ");
		if (period == Constant.EMPTY) {
			sql.append("  AND B.measurement_period =? ");
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER) {
			sql.append("  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)");
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		}	
		int count = jdbcTemplate.queryForObject(sql.toString(), Integer.class,list.toArray());
		return count < 1 ? 0 : ((count - 1) / pagesize) + 1;
	}
	/**
	 * 获取分页的总页数
	 */
	public int pageNumber(Long user_id, int period, int pagesize) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		StringBuffer sql = new StringBuffer("SELECT COUNT(*) " + " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ");				
		if (period == Constant.EMPTY) {
			sql.append("  AND B.measurement_period =? ");
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER) {
			sql.append("  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)");
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		}	
		int count = jdbcTemplate.queryForObject(sql.toString(), Integer.class,  list.toArray());
		return count < 1 ? 0 : ((count - 1) / pagesize) + 1;
	}
	public static void main(String[] args) {
		
	}
}
