package com.haaa.cloudmedical.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.haaa.cloudmedical.common.dao.BaseTemplateDao;

@Repository
public class AIODao extends BaseTemplateDao {

	public long saveData(Map<String, Object> map) {
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Map<String,Object[]> property = this.getParamsAndValues(map);
		Object[] params = property.get("params");
		Object[] values  =property.get("values");
		final String sql ="insert into self_service_check ("+StringUtils.join(params, ",")+") values("+StringUtils.repeat("?", ",", params.length)+")";
		System.out.println(sql);
		this.jdbcTemplate.update(new PreparedStatementCreator() {
			public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
				PreparedStatement ps = connection.prepareStatement(sql, 1);
				Object[] objects = AIODao.this.valueArray(map);
				for (int i = 0; i < objects.length; i++) {
					ps.setObject(i + 1, objects[i]);
				}
				return ps;
			}
		}, keyHolder);

		Long generatedId = keyHolder.getKey().longValue();
		return generatedId;
	}

	public List<Map<String, Object>> getTimeList(long user_id, String downTime, String upTime) {	
		List<Map<String, Object>> list;
		String sql ="select order_id,DATE_FORMAT(create_date,'%Y-%m-%d %H:%i') date from self_service_check where user_id=?";
		if (downTime != null && upTime != null) {
			sql +=  " AND create_date BETWEEN ? AND ? ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql, user_id, downTime, upTime);
		} else if (downTime != null) {
			sql += " AND create_date > ? ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql, user_id,downTime);
		} else if (upTime != null) {
			sql +=" create_date < ? ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql, user_id,upTime);
		} else {
			sql +=" AND DATE_SUB(NOW(),INTERVAL 6 MONTH) < A.create_date ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql);
		}
		return list;
	}

	public Map<String, Object> getDetail(long user_id, long order_id) {
		String sql = "select * from self_service_check where user_id=? AND order_id=?";
		return jdbcTemplate.queryForMap(sql, user_id, order_id);
	}

	public List<Map<String, Object>> getDetailByTime(long user_id, String downTime, String upTime) {
		List<Map<String, Object>> list;
		String sql = "select * from self_service_check where user_id=? AND";
		if (downTime != null && upTime != null) {
			sql += " create_date BETWEEN ? AND ? ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql, user_id, downTime, upTime);
		} else if (downTime != null) {
			sql += " create_date > ? ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql, user_id,downTime);
		} else if (upTime != null) {
			sql += " create_date < ? ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql, user_id,upTime);
		} else {
			sql = " DATE_SUB(NOW(),INTERVAL 6 MONTH) < A.create_date ORDER BY create_date DESC";
			list = jdbcTemplate.queryForList(sql);
		}
		return list;
	}
	
}
