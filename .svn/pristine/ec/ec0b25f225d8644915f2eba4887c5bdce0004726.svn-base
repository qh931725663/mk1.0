package com.haaa.cloudmedical.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.haaa.cloudmedical.common.dao.BaseTemplateDao;
import com.sun.org.apache.bcel.internal.generic.RETURN;

@Repository
public class MedicalSurveyDao extends BaseTemplateDao {

	public Map<String, Object> getPersonalInfo(String user_id) {
		String sql = "select user_id,user_name,user_card,user_phone,user_sex,user_birthday,user_address,email,user_marriage,user_height,user_weight from n_user where user_id = ?";
		return jdbcTemplate.queryForMap(sql, user_id);
	}

	public long saveHealthHistory(Map<String, Object> data) {
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Map<String, Object[]> property = this.getParamsAndValues(data);
		Object[] params = property.get("params");
		Object[] values = property.get("values");
		final String sql = "insert into s_medical_history (" + StringUtils.join(params, ",") + ") values("
				+ StringUtils.repeat("?", ",", params.length) + ")";
		System.out.println(sql);
		this.jdbcTemplate.update(new PreparedStatementCreator() {
			public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
				PreparedStatement ps = connection.prepareStatement(sql, 1);
				for (int i = 0; i < values.length; i++) {
					ps.setObject(i + 1, values[i]);
				}
				return ps;
			}
		}, keyHolder);

		Long generatedId = keyHolder.getKey().longValue();
		return generatedId;
	}

	public Map<String, Object> getQuestionById(String order_id) {
		String sql = "select parent_id,question_content,question_type from s_medical_history_question_k where order_id = ?";
		return jdbcTemplate.queryForMap(sql, order_id);
	}

	public Map<String, Object> getQuestionTableById(String order_id) {
		String sql = "select table_id from s_medical_history_question_k where order_id = ?";
		return jdbcTemplate.queryForMap(sql, order_id);
	}

	public long addQuestion(Map<String, Object> question) {
		return insert(question, "s_medical_history_question");
	}

	public long addAnswer(Map<String, Object> answer) {
		return insert(answer, "s_medical_history_answer");
	}

	public int[] batchAddQuestion(String[] strings, List<Object[]> list) {
		String sql = "insert into s_medical_history_question (" + StringUtils.join(strings, ",") + ") values ("
				+ StringUtils.repeat("?", ",", strings.length) + ")";
		return jdbcTemplate.batchUpdate(sql, list);

	}

	public int[] batchAddAnswer(String[] strings, List<Object[]> list) {
		String sql = "insert into s_medical_history_answer (" + StringUtils.join(strings, ",") + ") values ("
				+ StringUtils.repeat("?", ",", strings.length) + ")";
		return jdbcTemplate.batchUpdate(sql, list);

	}

	/**
	 * 
	 * @Title: getSurveyHistory @Description:
	 * 根据时间查询健康调查的具体数据列表，如果没传时间默认为最近12个月 @param user_id @param downTime @param
	 * upTime @return @throws
	 */
	public List<Map<String, Object>> getSurveyHistory(String user_id, String downTime, String upTime) {
		String sql = "select order_id,user_id, create_date,update_date,user_name,fixed_telephone,user_phone,user_sex,user_address,email,language,employment_status,user_height,user_weight,HighPressure,LowPressure,medical_insurance,medical_insurance_code,emergency_contact,emergency_contact_phone,last_check,PulseRate from s_medical_history where user_id = ? ";
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		if (downTime != null && !downTime.equals("")) {
			sql += " AND A.create_date>? ";
			list.add(downTime);
		}
		if (upTime != null && !upTime.equals("")) {
			sql += " AND DATE_SUB(A.create_date,INTERVAL 1 DAY)<? ";
			list.add(upTime);
		}
		if ((downTime == null || downTime.equals("")) && (upTime == null || upTime.equals(""))) {
			sql += " AND DATE_SUB(NOW(),INTERVAL 12 MONTH) < create_date ";
		}
		sql += " ORDER BY create_date DESC ";
		return jdbcTemplate.queryForList(sql, list.toArray());
	}

	/**
	 * 
	 * @Title: getSurveyHistoryById @Description:
	 * 根据order_id查询健康调查的基础数据，如果没传时间默认为最近12个月 @param order_id @return @throws
	 */
	public Map<String, Object> getSurveyHistoryById(String order_id) {
		Map<String, Object> map = new HashMap<String, Object>();
		String sql = "select order_id,user_id, create_date,update_date,user_birthday,findName(user_marriage) user_marriage,user_name,fixed_telephone,user_phone,user_sex,user_address,email,language,findName(employment_status) employment_status,user_height,user_weight,HighPressure,LowPressure,medical_insurance,medical_insurance_code,emergency_contact,emergency_contact_phone,emergency_contact_with,last_check,PulseRate from s_medical_history where order_id = ? ";		
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sql, order_id);
		if (list.size()>0) {
			map = list.get(0);
		}
		return map;
	}

	public List<Map<String, Object>> getAnswersBySurvey(String order_id) {
		String sql = "select a.question_k_order_id,a.question_index,b.survey_answer"
				+ " from  s_medical_history_question a, s_medical_history_answer b "
				+ " where a.order_id=b.question_order_id and a.medical_history_order_id=? ORDER BY a.question_k_order_id,a.question_index";
		return jdbcTemplate.queryForList(sql, order_id);
	}

	/**
	 * 
	 * @Title: getTimeList @Description: 根据时间查询健康调查的时间列表，如果没传时间默认为最近12个月 @param
	 * user_id @param downTime @param upTime @return @throws
	 */
	public List<Map<String, Object>> getTimeList(String user_id, String downTime, String upTime) {
		String sql = "select order_id,user_id,DATE_FORMAT(create_date,'%Y-%m-%d') date from s_medical_history where user_id = ? ";
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		if (downTime != null && !downTime.equals("")) {
			sql += " AND DATE_ADD(A.create_date,INTERVAL 1 DAY)>? ";
			list.add(downTime);
		}
		if (upTime != null && !upTime.equals("")) {
			sql += " AND DATE_SUB(A.create_date,INTERVAL 1 DAY)<? ";
			list.add(upTime);
		}
		if ((downTime == null || downTime.equals("")) && (upTime == null || upTime.equals(""))) {
			sql += " AND DATE_SUB(NOW(),INTERVAL 12 MONTH) < create_date ";
		}
		sql += " ORDER BY create_date DESC ";
		return jdbcTemplate.queryForList(sql, list.toArray());
	}
}
