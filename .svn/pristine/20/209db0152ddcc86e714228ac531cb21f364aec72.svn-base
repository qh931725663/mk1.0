package com.haaa.cloudmedical.platform.chronicManage.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.haaa.cloudmedical.common.entity.ChronicManageDTO;
import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.Page;
import com.haaa.cloudmedical.common.util.BeanUtil;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.dao.ChronicPlanDao;
import com.haaa.cloudmedical.entity.ChronicManage;
import com.haaa.cloudmedical.entity.ChronicTrack;
import com.haaa.cloudmedical.entity.User;

@Service
public class ChronicPlanService {

	@Autowired
	private ChronicPlanDao dao;

	public Page gridQuery(User user, ChronicManage chronicManage, ChronicManageDTO dto, int pageno) {
		Object temp = null;
		List<Object> values = new ArrayList<Object>();
		StringBuilder sql = new StringBuilder(
				"select a.user_name,a.user_card,a.user_phone,getahdi(a.ahdi_value) ahdi,allChronicName(a.user_id) ChronicName,"
						+ "findname(a.user_sex) user_sex,a.user_age,findname(a.user_marriage) user_marriage,findname(a.user_work) user_work,"
						+ "(case is_end(a.user_id) when 0 then '进行中' when 1 then '已完成' end) plan_flag,date_format(b.update_date,'%Y-%m-%d %H:%i') update_date"
						+ " from n_user a,m_chronic_manage b where a.user_id = b.user_id");
		// 姓名
		temp = user.getUser_name();
		if (temp != null && !"".equals(temp)) {
			values.add("%" + temp + "%");
			sql.append(" and a.user_name like ?");
		}
		// 身份证号码
		temp = user.getUser_card();
		if (temp != null && !"".equals(temp)) {
			values.add("%" + temp + "%");
			sql.append(" and a.user_card like ?");
		}
		// 手机号
		temp = user.getUser_phone();
		if (temp != null && !"".equals(temp)) {
			values.add("%" + temp + "%");
			sql.append(" and a.user_phone like ?");
		}
		// 慢病类型
		temp = chronicManage.getChronic_name();
		if (temp != null && !"".equals(temp)) {
			values.add(temp);
			sql.append(" and instr(allChronicName(a.user_id),?)>0");
		}
		// 性别
		temp = user.getUser_sex();
		if (temp != null && !"".equals(temp)) {
			values.add(temp);
			sql.append(" and a.user_sex = ?");
		}
		// 风险指数
		temp = dto.getAhdi();
		if (temp != null && !"".equals(temp)) {
			values.add(temp);
			sql.append(" and getahdi(a.ahdi_value) = ?");
		}
		// 工作强度
		temp = user.getUser_work();
		if (temp != null && !"".equals(temp)) {
			values.add(temp);
			sql.append(" and a.user_work = ?");
		}
		// 管理计划完成状态
		temp = dto.getFlag();
		if (temp != null && !"".equals(temp)) {
			values.add(temp);
			sql.append(" and is_end(b.user_id) = ?");
		}
		// 更新日期
		String startDate = dto.getStatrDate();
		String endDate = dto.getEbdDate();
		if ((startDate != null && !"".equals(startDate)) && (endDate == null || "".equals(endDate))) {
			values.add(startDate);
			sql.append(" and b.update_date >= ? and b.update_date<= now()");
		}
		if ((startDate == null || "".equals(startDate)) && (endDate != null && !"".equals(endDate))) {
			values.add(endDate);
			sql.append(" and b.update_date>= now()" + " and b.update_date <= ? ");
		}
		if ((startDate != null && !"".equals(startDate)) && (endDate != null && !"".equals(endDate))) {
			values.add(startDate);
			values.add(endDate);
			sql.append(" and b.update_date >= ? and b.update_date <= ? ");
		}
		sql.append(" group by b.user_id order by b.update_date");
		System.out.println(sql);
		Page page = dao.pageQuery(sql.toString(), values.toArray(), pageno);
		return page;

	}

	// 获取该病人计划详情
	public Map<String, Object> getUserPlan(String user_id) {
		String sql = "select a.user_name,a.user_card,a.user_phone,findName (a.user_is_vip) user_is_vip,findname (a.user_sex) user_sex,a.user_age,"
				+ "findName (a.user_marriage) user_marriage,a.user_medicare_card,findname (a.user_medical_burden) user_medical_burden,findname(a.user_work) user_work,"
				+ "a.user_height,a.user_weight,findname(a.user_blood) user_blood,date_format(a.create_date,'%Y-%m-%d') create_date,allChronicName (a.user_id) ChronicName,"
				+ "(case is_end (a.user_id) when 0 then '进行中' when 1 then '已完成' end) plan_flag from	n_user a where a.user_id= ?";
		Map<String, Object> user = dao.select(sql, user_id).get(0);

		sql = "select	a.chronic_name,CONCAT('一年不少于',a.check_target,'次',a.manage_text) manage_text,(case is_end when 101 then	'完成' when 102 then '未完成' end) is_end"
				+ " from m_chronic_manage a where	a.user_id = ? ";
		Map<String, Object> chronicPlanGroup = new HashMap<String, Object>();
		chronicPlanGroup.put("user_info", user);
		List<Map<String, Object>> allchronicplan = dao.select(sql, user_id);
		for (String chronic_name : Arrays.asList("高血压", "高脂血症", "糖尿病", "慢性阻塞性肺病")) {
			List<Map<String, Object>> list = allchronicplan.stream()
					.filter(m -> m.get("chronic_name").toString().equals(chronic_name)).collect(Collectors.toList());
			if (list.size() > 0) {
				chronicPlanGroup.put(chronic_name, list);
			}
		}
		return chronicPlanGroup;
	}

	// 检测计划详情
	public List<Map<String, Object>> userPlanDetail(String order_id) {
		String sql = "select a.order_id,a.chronic_code,a.chronic_name,(select b.manage_text from m_chronic_manage b where b.order_id = a.chronic_order_id) manage_text,a.check_num,"
				+ "date_format(a.create_date,'%Y-%m-%d %H:%i') create_date,a.check_result from m_track_plan a where a.chronic_order_id = ?";
		List<Map<String, Object>> user_info = dao.select(sql, order_id);
		List<Long> values = new ArrayList<Long>();
		for (Map<String, Object> map : user_info) {
			values.add(Long.parseLong(map.get("order_id").toString()));
		}
		sql = "select parent_id,medical_picture_upload from p_picture  where parent_id in ("
				+ StringUtils.repeat("?", ",", values.size()) + ")  and pic_type= ?";

		String pic_type = "";
		if (user_info.size() > 0) {
			pic_type = user_info.get(0).get("chronic_code").toString();
		}
		values.add(Long.parseLong(pic_type));
		List<Map<String, Object>> pic_list = dao.select(sql, values.toArray());
		for (Map<String, Object> userinfo : user_info) {
			List<String> pic_index = new ArrayList<String>();
			for (Map<String, Object> pic_index_map : pic_list) {
				if (pic_index_map.get("parent_id").toString().equals(userinfo.get("order_id").toString())) {
					pic_index.add(pic_index_map.get("medical_picture_upload").toString());
				}
			}
			userinfo.put("pic_index", pic_index);
		}
		return user_info;
	}

	// 修改计划
	public boolean modifyPlan(String order_id, String check_target) {
		boolean flag = false;
		ChronicManage chronicManage = new ChronicManage();
		chronicManage.setOrder_id(order_id);
		chronicManage.setCheck_target(check_target);
		try {
			dao.update(chronicManage, "m_chronic_manage");
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	// 查询
	public Map<String, Object> query(String order_id) {
		String sql = "select a.chronic_name,a.manage_text,CONCAT('第',a.check_num+1,'次') check_num from m_chronic_manage a where a.order_id = ? ";
		Map<String, Object> map = null;
		List<Map<String, Object>> list = dao.select(sql, order_id);
		if (list.size() > 0) {
			map = list.get(0);
		}
		return map;
	}

	// 追踪计划
	public boolean trackPlan(String order_id, String check_result) {
		boolean flag = false;
		String sql = "select * from m_chronic_manage where order_id = ?";
		List<Map<String,Object>> list = dao.select(sql, order_id);
		if(list.size()>0){
			ChronicManage chronicManage = BeanUtil.toObjectFromMap(list.get(0), ChronicManage.class);
			int check_num = Integer.parseInt(chronicManage.getCheck_num());
			int check_target = Integer.parseInt(chronicManage.getCheck_target());
			chronicManage.setCheck_num(String.valueOf(check_num+1));
			if(check_num+1>=check_target)
				chronicManage.setIs_end(Constant.COMMON_FLAG_YES);
			try{
				dao.update(chronicManage, "m_chronic_manage");
				ChronicTrack track = new ChronicTrack();
				track.setCheck_result(check_result);
				track.setChronic_order_id(order_id);
				track.setCheck_num(chronicManage.getCheck_num());
				track.setChronic_name(chronicManage.getChronic_name());
				track.setChronic_code(chronicManage.getChronic_code());
				track.setCreate_date(DateUtil.DateFormat(new Date(), "yyyy-MM-dd HH:mm:ss"));
				try {
					dao.insert(track, "m_track_plan");
					flag = true;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}catch(Exception e){
				e.printStackTrace();
			}
		}

		return flag;
	}

	// 新增计划
	public long addUserPlan(ChronicManage chronicManage) {
		long order_id = 0;
		chronicManage.setCheck_num("0");
		chronicManage.setIs_end(Constant.COMMON_FLAG_NO);
		chronicManage.setCreate_date(DateUtil.DateFormat(new Date(), "yyyy-MM-dd HH:mm:ss"));
		try {
			order_id = dao.insert(chronicManage, "m_chronic_manage");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return order_id;
	}

}
