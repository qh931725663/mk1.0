package com.haaa.cloudmedical.app.equipment.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.haaa.cloudmedical.app.util.DoctorAppPushUtils;
import com.haaa.cloudmedical.common.annotation.Log;
import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.InfoJson;
import com.haaa.cloudmedical.common.service.UnicodeService;
import com.haaa.cloudmedical.common.util.DateUtil;
import com.haaa.cloudmedical.common.util.NumberUtil;
import com.haaa.cloudmedical.common.util.StringUtil;
import com.haaa.cloudmedical.dao.DoctorDao;
import com.haaa.cloudmedical.dao.equipment.BloodSugarDao;
import com.haaa.cloudmedical.entity.BloodSugar;
import com.haaa.cloudmedical.entity.EquipmentUse;

/**
 * 
 * 
 * @author Bowen Fan
 *
 */
@Service
@Log(name = "app血糖")
public class BloodSugarService {

	@Resource
	private BloodSugarDao bloodSugarDao;

	@Resource
	private UnicodeService unicodeService;

	@Resource
	private DoctorDao doctorDao;

	/**
	 * 
	 * @Title: add @Description: 添加血糖信息 @param equipmentUse @param
	 *         bloodSugar @return InfoJson 返回类型 @throws
	 */
	@Transactional
	@Log(name = "血糖记录添加")
	public InfoJson add(EquipmentUse equipmentUse, BloodSugar bloodSugar) {
		InfoJson infoJson = new InfoJson();
		if (equipmentUse.getCreate_date() == null) {
			Date date = new Date();
			equipmentUse.setCreate_date(DateUtil.dateFormat(date, "yyyy-MM-dd HH:mm:ss"));
		}
		equipmentUse.setEquipment_name("blood_sugar");
		equipmentUse.setEquipment_property_order_id(Constant.BLOOD_SUGAR_ID);
		Long id = (Long) bloodSugarDao.insertAndGetKey(equipmentUse, "c_equipment_use");
		bloodSugar.setCreate_date(equipmentUse.getCreate_date());
		bloodSugar.setEquipment_use_order_id(String.valueOf(id));
		long result = (Long) bloodSugarDao.insertAndGetKey(bloodSugar, "c_blood_sugar");
		Map<String, Object> map = bloodSugarDao.queryDetailById(result, "c_blood_sugar");
		map.put("datetime", DateUtil.DateFormat(map.remove("create_date"), "yyyy-MM-dd"));
		pushUrgentMessage(equipmentUse.getUser_id(), equipmentUse.getDoctor_id(), bloodSugar);
		infoJson.setData(map);
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: pushUrgentMessage @Description: 紧急消息推送 @param user_id @param
	 *         doctor_id @param bloodSugar @throws
	 */
	private void pushUrgentMessage(String patient_id, String doctor_id, BloodSugar bloodSugar) {
		String content = "";
		Map<String, Object> patientMap = doctorDao.getPatientInfo(patient_id);
		Map<String, Object> pushMessageMap = new HashMap<String, Object>();
		if (StringUtil.isEmpty(doctor_id)) {
			doctor_id = String.valueOf(patientMap.get("doctor_id"));
		}
		float blood_sugar = Float.parseFloat(bloodSugar.getBloodSugar());
		int period = Integer.parseInt(bloodSugar.getMeasurement_period());
		int level = 0;
		// 判断高血糖级别
		if (period == Constant.EMPTY_STOMACH) {
			if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("fbg5")) {
				level = 3;
			} else if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("fbg4")) {
				level = 2;
			} else if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("fbg3")) {
				level = 1;
			}
		} else if (period == Constant.AFTER_BREAKFAST || period == Constant.AFTER_DINNER
				|| period == Constant.AFTER_LUNCH || period == Constant.BEFORE_SLEEP) {
			if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("post5")) {
				level = 3;
			} else if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("post4")) {
				level = 2;
			} else if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("post3")) {
				level = 1;
			}
		} else if (period == Constant.BEFORE_DINNER || period == Constant.BEFORE_LUNCH) {
			if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("pre5")) {
				level = 3;
			} else if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("pre4")) {
				level = 2;
			} else if (blood_sugar > Constant.BLOOD_SUGAR_LEVEL.get("pre3")) {
				level = 1;
			}
		}
		if (level > 0 && String.valueOf(1).equals(patientMap.get("is_send"))) {
			pushMessageMap.put("measurement_result", level);
			pushMessageMap.put("measurement_type", Constant.remind_measurement_bloodpressure);
			pushMessageMap.put("patient_id", patientMap.get("user_id"));
			pushMessageMap.put("doctor_id", patientMap.get("doctor_id"));
			pushMessageMap.put("measurement_period", bloodSugar.getMeasurement_period());
			content = content + Constant.MEASUREMENT_PERIOD_MAP.get(bloodSugar.getMeasurement_period()) + "\b\b" + "血糖："
					+ bloodSugar.getBloodSugar() + "mmol/L";
			pushMessageMap.put("measurement_value", content);
			pushMessageMap.put("create_date", bloodSugar.getCreate_date());
			doctorDao.insert(pushMessageMap, "c_push_message");
			if (level >= 2) {
				content = bloodSugar.getCreate_date() + "\b\b" + patientMap.get("user_name") + "\b\b" + "测量类型：血糖"
						+ "\b\b" + "测量结果：" + content;
				DoctorAppPushUtils.pushMsgToSingleByAlias(doctor_id,  content);
			}
		}

	}

	/**
	 * 
	 * @Title: queryRecent @Description: app端查询曲线数据 (android IOS) @param
	 *         user_id @param period @return InfoJson 返回类型 @throws
	 */
	public InfoJson queryRecent(long user_id, int period, int days) {
		InfoJson infoJson = new InfoJson();
		infoJson.setCount(bloodSugarDao.queryRecent(user_id, 90).size());

		Map<String, Object> data = new HashMap<String, Object>();
		List<Map<String, Object>> list = bloodSugarDao.queryRecent(user_id, period, days);
		int temp_period;
		float temp_bloodsugar;
		for (Map<String, Object> map2 : list) {
			temp_period = (int) map2.get("measurement_period");
			temp_bloodsugar = (float) map2.get("BloodSugar");
			int temp = classifyBloodSugar(temp_bloodsugar, temp_period);
			if (temp == -1) {
				map2.put("result", "不正常");
				map2.put("result_icon", 0);
			} else if (temp == 1) {
				map2.put("result", "不正常");
				map2.put("result_icon", 0);
			} else if (temp == 0) {
				map2.put("result", "正常");
				map2.put("result_icon", 1);
			}
			map2.put("BloodSugar", (NumberUtil.decimalFormat((float) map2.remove("BloodSugar"), 1)));
		}
		data.put("period", period);
		List<Map<String, Object>> maps = bloodSugarDao.queryMonth(user_id);
		data.put("size", maps.size());
		data.put("list", list);
		infoJson.setData(data);

		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: queryRecent @Description: app端查询曲线数据（IOS） @param user_id @param
	 *         period @return InfoJson 返回类型 @throws
	 */
	public InfoJson queryRecent1(long user_id, int period, int days) {
		InfoJson infoJson = new InfoJson();
		Map<String, Object> map = new HashMap<String, Object>();
		infoJson.setCount(bloodSugarDao.queryRecent(user_id, 90).size());

		List<Map<String, Object>> list = bloodSugarDao.queryRecent(user_id, period, days);
		int temp_period;
		float temp_bloodsugar;
		for (Map<String, Object> map2 : list) {
			temp_period = (int) map2.get("measurement_period");
			temp_bloodsugar = (float) map2.get("BloodSugar");
			int temp = classifyBloodSugar(temp_bloodsugar, temp_period);
			if (temp == -1) {
				map2.put("result", "低于正常");
			} else if (temp == 1) {
				map2.put("result", "高于正常");
			} else if (temp == 0) {
				map2.put("result", "正常");
			}
			map2.put("BloodSugar", (NumberUtil.decimalFormat((float) map2.remove("BloodSugar"), 1)));
		}
		map.put(String.valueOf(period), list);
		List<Map<String, Object>> maps = bloodSugarDao.queryMonth(user_id);
		map.put("size" + String.valueOf(period), maps.size());

		infoJson.setData(map);
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: pageQuery @Description: 分页查询，按月分页查询 @param user_id @param
	 *         year_month @param pageno @param pagesize @return @throws
	 */
	public InfoJson pageQuery(long user_id, String year_month, int pageno, int pagesize) {
		InfoJson infoJson = new InfoJson();
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		List<Object> monthList = new ArrayList<Object>();
		if (year_month != null) {
			dataList = bloodSugarDao.queryByMonth(user_id, year_month, pageno, pagesize);
			infoJson.setCount(bloodSugarDao.pageNumberByMonth(user_id + "", year_month, pagesize));

		} else {
			dataList = bloodSugarDao.pageQuery(user_id, pageno, pagesize);
			infoJson.setCount(bloodSugarDao.pageNumber(user_id + "", pagesize));

		}
		if (dataList.size() > 0) {
			Iterator<Map<String, Object>> iterator = dataList.iterator();
			Map<String, Object> map = iterator.next();
			Date date = (Date) map.get("datetime");
			String yearMonth = DateUtil.dateFormat(date, "yyyy-MM");
			String monthDay = DateUtil.dateFormat(date, "MM-dd");
			String tempYearMonth = null;
			outer: while (true) {
				if (map == null) {
					break;
				}
				Map<String, Object> monthMap = new HashMap<String, Object>();
				tempYearMonth = yearMonth;
				monthList.add(monthMap);
				monthMap.put("yearmonth", yearMonth);
				List<Object> timeList = new ArrayList<Object>();
				while (tempYearMonth.equals(yearMonth)) {
					monthMap.put("timelist", timeList);
					Map<String, Object> timeMap = new HashMap<String, Object>();
					map.put("datetime", DateUtil.dateFormat(date, "MM-dd HH:mm"));
					map.put("BloodSugar", (NumberUtil.decimalFormat((float) map.remove("BloodSugar"), 1)));
					map.put("month", yearMonth);
					timeMap.put("singledata", map);
					int hour = DateUtil.getHour(date);
					int period = periodDefine(hour);
					timeMap.put("period", period);
					timeList.add(timeMap);
					if (iterator.hasNext()) {
						map = iterator.next();
						date = (Date) map.get("datetime");
						yearMonth = DateUtil.dateFormat(date, "yyyy-MM");
						monthDay = DateUtil.dateFormat(date, "MM-dd");
					} else {
						break outer;
					}

				}
			}
		}
		infoJson.setData(monthList);
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * 
	 * @Title: periodDefine @Description: 根据查询的时间 判断早中晚时间段，-1上午，0下午，1晚上 @param
	 *         hour @return @throws
	 */
	private int periodDefine(int hour) {
		int period = 0;
		if (hour < Constant.MORNING_END && hour >= 0) {
			period = -1;
		} else if (hour < Constant.NIGHT_BEGIN) {
			period = 0;
		} else {
			period = 1;
		}
		return period;
	}

	/**
	 * 查询具有数据的月份
	 * 
	 * @param user_id
	 * @return
	 */
	public InfoJson queryMonth(Long user_id) {
		InfoJson infoJson = new InfoJson();
		infoJson.setData(bloodSugarDao.queryMonth(user_id));
		infoJson.setStatus(1);
		return infoJson;
	}

	/**
	 * app端曲线查询统计功能，统计所有数据
	 * 
	 * @param user_id
	 * @return
	 * @throws Exception
	 */
	public InfoJson dataStat(long user_id, int period, Integer days) {
		InfoJson infoJson = new InfoJson();
		Map<String, Integer> statMap = new HashMap<String, Integer>();
		int high = 0;
		int low = 0;
		int normal = 0;
		int temp_period = 0;
		float bloodsugar = 0;
		List<Map<String, Object>> data = bloodSugarDao.queryRecent(user_id, period, days);

		for (Map<String, Object> map : data) {
			temp_period = (int) map.get("measurement_period");
			bloodsugar = (float) map.get("BloodSugar");
			int temp = classifyBloodSugar(bloodsugar, temp_period);
			if (temp == -1) {
				low++;
			} else if (temp == 1) {
				high++;
			} else if (temp == 0) {
				normal++;
			}
		}
		statMap.put("high", high);
		statMap.put("low", low);
		statMap.put("normal", normal);
		infoJson.setData(statMap);
		infoJson.setStatus(1);
		return infoJson;
	}

	private int classifyBloodSugar(float blood_sugar, int period) {
		if (period == Constant.EMPTY_STOMACH) {
			if (blood_sugar < Constant.lOW_FBG) {
				return -1;
			} else if (blood_sugar > Constant.HIGH_FBG) {
				return 1;
			} else {
				return 0;
			}
		}
		// 睡前
		else if (period == Constant.BEFORE_SLEEP) {
			if (blood_sugar < Constant.lOW_POST_BG) {
				return -1;
			} else if (blood_sugar > Constant.HIGH_POST_BG) {
				return 1;
			} else {
				return 0;
			}
		}
		// 饭后
		else if (period == Constant.AFTER_BREAKFAST || period == Constant.AFTER_DINNER
				|| period == Constant.AFTER_LUNCH) {
			if (blood_sugar < Constant.lOW_POST_BG) {
				return -1;
			} else if (blood_sugar > Constant.HIGH_POST_BG) {
				return 1;
			} else {
				return 0;
			}

		} else if (period == Constant.BEFORE_DINNER || period == Constant.BEFORE_LUNCH) {// 饭前
			if (blood_sugar < Constant.lOW_PRE_BG) {
				return -1;
			} else if (blood_sugar > Constant.HIGH_PRE_BG) {
				return 1;
			} else {
				return 0;
			}
		}
		return 0;
	}

	public InfoJson classify(String blood_sugar, int period) {
		InfoJson infoJson = new InfoJson();
		Map<String, Object> retMap = new HashMap<String, Object>();
		float temp_blood_sugar = Float.parseFloat(blood_sugar);
		String blood_sugar_result = "";
		String measurement_period = "";
		if (period == Constant.EMPTY_STOMACH) {
			measurement_period = "空腹";
			if (temp_blood_sugar < 4.4) {
				blood_sugar_result = "低血糖";
			} else if (temp_blood_sugar < 6.1) {
				blood_sugar_result = "正常";
			} else if (temp_blood_sugar < 7.2) {
				blood_sugar_result = "良好";
			} else if (temp_blood_sugar < 8.2) {
				blood_sugar_result = "一般";
			} else if (temp_blood_sugar < 10) {
				blood_sugar_result = "不良";
			} else {
				blood_sugar_result = "极其不良";
			}
		} else if (period == Constant.AFTER_BREAKFAST || period == Constant.AFTER_DINNER
				|| period == Constant.AFTER_LUNCH) {
			measurement_period = "餐后";
			if (temp_blood_sugar < 5.0) {
				blood_sugar_result = "低血糖";
			} else if (temp_blood_sugar < 7.2) {
				blood_sugar_result = "正常";
			} else if (temp_blood_sugar < 8.8) {
				blood_sugar_result = "良好";
			} else if (temp_blood_sugar < 11.0) {
				blood_sugar_result = "一般";
			} else if (temp_blood_sugar < 15.3) {
				blood_sugar_result = "不良";
			} else {
				blood_sugar_result = "极其不良";
			}
		} else if (period == Constant.BEFORE_DINNER || period == Constant.BEFORE_LUNCH) {
			measurement_period = "餐前";
			if (period == Constant.EMPTY_STOMACH) {
				measurement_period = "空腹";
				if (temp_blood_sugar < 4.4) {
					blood_sugar_result = "低血糖";
				} else if (temp_blood_sugar < 6.1) {
					blood_sugar_result = "正常";
				} else if (temp_blood_sugar < 7.2) {
					blood_sugar_result = "良好";
				} else if (temp_blood_sugar < 8.2) {
					blood_sugar_result = "一般";
				} else if (temp_blood_sugar < 10) {
					blood_sugar_result = "不良";
				} else {
					blood_sugar_result = "极其不良";
				}
			}
		}
		retMap.put("blood_sugar", blood_sugar);
		retMap.put("blood_sugar_result", blood_sugar_result);
		retMap.put("measurement_period", measurement_period);
		infoJson.setData(retMap);
		infoJson.setStatus(1);
		return infoJson;

	}

}
