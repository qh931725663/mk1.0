package com.haaa.cloudmedical.dao.equipment;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.Page;
import com.haaa.cloudmedical.common.util.BeanPropertyUtil;
import com.haaa.cloudmedical.entity.BloodSugar;

@Repository
public class BloodSugarDao extends EquipmentDao {

	public long add(BloodSugar bloodSugar) {
		Map<String, Object> map = new HashMap<String, Object>();
		BeanPropertyUtil.toMapFromObject(map, bloodSugar);
		return insert(map, "c_blood_sugar");
	}

	/**
	 * 搜索所有阶段
	 * 
	 * 
	 * AND A.create_date<NOW()
	 * 
	 * @param user_id
	 * @param period
	 * 
	 * @return
	 */
	public List<Map<String, Object>> queryRecentAll(long user_id, int recent) {
		String sql = "SELECT A.order_id,DATE_FORMAT(A.create_date,'%Y-%m-%d %H:%i') datetime,B.BloodSugar,findName(B.measurement_period) period,B.measurement_period "
				+ " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ?  AND "
				+ " DATE_SUB(NOW(),INTERVAL ? DAY) <A.create_date  ORDER BY A.create_date DESC";
		return jdbcTemplate.queryForList(sql, user_id, recent);
	}

	/**
	 * 近期数据查询
	 * 
	 * @param user_id
	 * @param period
	 * @return
	 */
	public List<Map<String, Object>> queryRecent(long user_id, int period, int recent) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		String sql = "SELECT A.order_id,DATE_FORMAT(A.create_date,'%Y-%m-%d %H:%i') datetime,B.BloodSugar ,findName(B.measurement_period) period,B.measurement_period "
				+ " FROM c_equipment_use A,c_blood_sugar B WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ";
		if (period == Constant.EMPTY_STOMACH) {
			sql += "  AND B.measurement_period =? ";
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER_BREAKFAST || period == Constant.AFTER_DINNER
				|| period == Constant.AFTER_LUNCH) {
			sql += "  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)";
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		} else {
			sql += "  AND (B.measurement_period =? OR B.measurement_period =?) ";
			list.add(Constant.BEFORE_DINNER);
			list.add(Constant.BEFORE_LUNCH);
		}
		list.add(recent);
		sql += " AND DATE_SUB(NOW(),INTERVAL ? DAY) <A.create_date ORDER BY A.create_date DESC";
		return jdbcTemplate.queryForList(sql, list.toArray());
	}

	public List<Map<String, Object>> queryByMonth(Long user_id, String year_month, int pageno, int pagesize) {
		String sql = "SELECT B.equipment_use_order_id,A.order_id,A.create_date datetime,B.BloodSugar ,findName(B.measurement_period) period "
				+ " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id  AND A.user_id = ? AND "
				+ " DATE_FORMAT(A.create_date,'%Y-%m')=? ORDER BY A.create_date DESC LIMIT ?,?";
		int start = (pageno - 1) * pagesize;
		return jdbcTemplate.queryForList(sql, user_id, year_month, start, pagesize);
	}

	public List<Map<String, Object>> pageQuery(long user_id, int pageno, int pagesize) {
		String sql = "SELECT B.equipment_use_order_id,A.order_id,A.create_date datetime,B.BloodSugar BloodSugar,findName(B.measurement_period) period "
				+ " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ORDER BY A.create_date DESC LIMIT ?,?";
		int start = (pageno - 1) * pagesize;
		return jdbcTemplate.queryForList(sql, user_id, start, pagesize);
	}

	/*
	 * 鏌ヨ涓�涓勾鍐呮湁鏁版嵁鐨勬湀浠�
	 */
	public List<Map<String, Object>> queryMonth(long user_id) {
		String sql = "SELECT DISTINCT(DATE_FORMAT(A.create_date,'%Y-%m')) yearmonth "
				+ " FROM c_equipment_use A,c_blood_sugar B WHERE "
				+ " A.order_id=B.equipment_use_order_id AND A.user_id = ? AND "
				+ " DATE_SUB(NOW(),INTERVAL 1 YEAR) <=A.create_date  ORDER BY A.create_date DESC ";
		return jdbcTemplate.queryForList(sql, user_id);
	}

	public int pageNumber(String user_id, int pagesize) {
		String sql = "SELECT COUNT(*) " + " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ";
		int count = jdbcTemplate.queryForObject(sql, Integer.class, user_id);
		return count < 1 ? 0 : ((count - 1) / pagesize) + 1;
	}

	public int pageNumberByMonth(String user_id, String yearMonth, int pagesize) {
		String sql = "SELECT COUNT(*) " + " FROM c_equipment_use A,c_blood_sugar B "
				+ " WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? AND DATE_FORMAT(A.create_date,'%Y-%m')=?  ";
		int count = jdbcTemplate.queryForObject(sql, Integer.class, user_id, yearMonth);
		return count < 1 ? 0 : ((count - 1) / pagesize) + 1;
	}

	public List<Map<String, Object>> getDataByTime(String user_id, int period, String datemin, String datemax) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		String sql = "SELECT A.order_id,A.create_date,B.BloodSugar ,findName(B.measurement_period) period,B.measurement_period "
				+ " FROM c_equipment_use A,c_blood_sugar B WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ";
		if (period == Constant.EMPTY_STOMACH) {
			sql += "  AND B.measurement_period =? ";
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER_BREAKFAST || period == Constant.AFTER_DINNER
				|| period == Constant.AFTER_LUNCH) {
			sql += "  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)";
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		} else {
			sql += "  AND (B.measurement_period =? OR B.measurement_period =?) ";
			list.add(Constant.BEFORE_DINNER);
			list.add(Constant.BEFORE_LUNCH);
		}
		if (datemin != null && !datemin.equals("") && datemax != null && !datemax.equals("")) {
			sql += " AND A.create_date>? AND DATE_SUB(A.create_date,INTERVAL 1 DAY) <? ";
			list.add(datemin);
			list.add(datemax);
		} else if (datemin != null && !datemin.equals("")) {
			sql += " AND A.create_date>? ";
			list.add(datemin);
		} else if (datemax != null && !datemax.equals("")) {
			sql += " AND DATE_SUB(A.create_date,INTERVAL 1 DAY)<? ";
			list.add(datemax);
		} else {
			sql += " AND DATE_SUB(NOW(),INTERVAL ? DAY) <A.create_date ";
			list.add(Constant.RECENT);
		}
		sql += " ORDER BY A.create_date ASC ";
		return jdbcTemplate.queryForList(sql, list.toArray());
	}

	public Page pageQueryByTime(String user_id, int period, String datemin, String datemax, int pageno, int pagesize) {
		List<Object> list = new ArrayList<Object>();
		list.add(user_id);
		String sql = "SELECT A.order_id,DATE_FORMAT(A.create_date,'%Y-%m-%d %H:%i') datetime,B.BloodSugar ,findName(B.measurement_period) period,B.measurement_period "
				+ " FROM c_equipment_use A,c_blood_sugar B WHERE A.order_id=B.equipment_use_order_id AND A.user_id = ? ";
		if (period == Constant.EMPTY_STOMACH) {
			sql += "  AND B.measurement_period =? ";
			list.add(Constant.EMPTY_STOMACH);
		} else if (period == Constant.AFTER_BREAKFAST || period == Constant.AFTER_DINNER
				|| period == Constant.AFTER_LUNCH) {
			sql += "  AND (B.measurement_period =? OR B.measurement_period =? OR B.measurement_period =?)";
			list.add(Constant.AFTER_BREAKFAST);
			list.add(Constant.AFTER_DINNER);
			list.add(Constant.AFTER_LUNCH);
		} else {
			sql += "  AND (B.measurement_period =? OR B.measurement_period =?) ";
			list.add(Constant.BEFORE_DINNER);
			list.add(Constant.BEFORE_LUNCH);
		}
		if (datemin != null && !datemin.equals("") && datemax != null && !datemax.equals("")) {
			sql += " AND A.create_date>? AND DATE_SUB(A.create_date,INTERVAL 1 DAY) <? ";
			list.add(datemin);
			list.add(datemax);
		} else if (datemin != null && !datemin.equals("")) {
			sql += " AND A.create_date>? ";
			list.add(datemin);
		} else if (datemax != null && !datemax.equals("")) {
			sql += " AND DATE_SUB(A.create_date,INTERVAL 1 DAY)<? ";
			list.add(datemax);
		} else {
			sql += " AND DATE_SUB(NOW(),INTERVAL ? DAY) <A.create_date ";
			list.add(Constant.RECENT);
		}
		sql += " ORDER BY A.create_date DESC ";
		return super.pageQuery(sql, list.toArray(), pageno, pagesize);
	}
}
