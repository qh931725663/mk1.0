/**
 * 
 */
package com.haaa.cloudmedical.dao;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Repository;

import com.haaa.cloudmedical.common.dao.BaseTemplateDao;
import com.haaa.cloudmedical.common.util.StringUtil;

/**
 * @author Bowen Fan
 *
 */
@Repository
public class DiabetesDocDao extends BaseTemplateDao {

	public long addDoc(Map<String, Object> map) {
		return insert(map, "t_chronic_dm");
	}

	public int updateDoc(Map<String, Object> map) {
		return update(map, "t_chronic_dm");
	}

	public long addQuestions(Map<String, Object> map) {
		return insert(map, "t_chronic_dm_question");
	}

	public long addAnswers(Map<String, Object> map) {
		return insert(map, "t_chronic_dm_answer");
	}

	public Map<String, Object> getDocBasicInfo(long order_id) {
		String sql = "select order_id,base_status,image_status,station_status,status from t_chronic_dm where order_id =? ";
		return get(sql, new Object[] { order_id });
	}


	public List<Map<String, Object>> getKOptions(String scope_flag) {
		StringBuffer sql = new StringBuffer("select order_id, question_k_order_id,option_content,scope_flag,question_type from t_chronic_dm_options a inner join (select order_id question_order_id,question_type,scope_flag from t_chronic_dm_question_k )b on  a.question_k_order_id=b.question_order_id ");
		LinkedList<Object> params = new LinkedList<Object>();
		if (!StringUtil.isEmpty(scope_flag)) {
			sql.append(" where scope_flag=?");
			params.add(scope_flag);
		}
		return select(sql.toString(), params.toArray());
	}


	public List<Map<String, Object>> getKQuestions(String scope_flag) {
		StringBuffer sql = new StringBuffer("select order_id, question_content,parent_id,question_type,table_id,is_require,scope_flag from t_chronic_dm_question_k  ");
		LinkedList<Object> params = new LinkedList<Object>();
		if (!StringUtil.isEmpty(scope_flag)) {
			sql.append(" where scope_flag=?");
			params.add(scope_flag);
		}
		return select(sql.toString(), params.toArray());
		
	}

	/**
	 * 
	 * @Title: getAnswers 
	 * @Description: TODO(这里用一句话描述这个方法的作用) 
	 * @param order_id
	 * @param scope_flag  
	 * @return
	 * @throws
	 */
	public List<Map<String, Object>> getAnswers(long order_id, String scope_flag) {
		StringBuffer sql = new StringBuffer("SELECT c.table_id,b.question_index,b.question_k_order_id, a.option_order_id, a.option_content, c.question_type FROM t_chronic_dm_answer a LEFT JOIN t_chronic_dm_question b ON a.question_order_id = b.order_id LEFT JOIN t_chronic_dm_question_k c ON b.question_k_order_id = c.order_id WHERE a.dm_order_id = ? ");		
		LinkedList<Object> params = new LinkedList<Object>();
		params.add(order_id);
		if (!StringUtil.isEmpty(scope_flag)) {			
			sql.append(" AND c.scope_flag = ?");
			params.add(scope_flag);
		}
		return select(sql.toString(), params.toArray());
	}

	public List<Map<String, Object>> getQuestionsByOrderId(long order_id){
		String sql = "select * from t_chronic_dm_question where dm_order_id=?";
		return select(sql, order_id);
	}
	
	
	public void batchAddQuestions(String[] fields,List<Object[]> params){		
		StringBuffer fieldString = new StringBuffer();
		StringBuffer paramsString = new StringBuffer();
		Arrays.asList(fields).forEach(s->{
			fieldString.append(s+",");
			paramsString.append("?,");
		});
		fieldString.deleteCharAt(fieldString.length()-1);
		paramsString.deleteCharAt(paramsString.length()-1);
		String sql = "insert into t_chronic_dm_question ("+fieldString.toString()+")values("+paramsString.toString()+")";
		super.jdbcTemplate.batchUpdate(sql, params);
	}
	
	public void batchAddAnswers(String[] fields,List<Object[]> params){		
		StringBuffer fieldString = new StringBuffer();
		StringBuffer paramsString = new StringBuffer();
		Arrays.asList(fields).forEach(s->{
			fieldString.append(s+",");
			paramsString.append("?,");
		});
		fieldString.deleteCharAt(fieldString.length()-1);
		paramsString.deleteCharAt(paramsString.length()-1);
		String sql = "insert into t_chronic_dm_answer ("+fieldString.toString()+")values("+paramsString.toString()+")";
		super.jdbcTemplate.batchUpdate(sql, params);
	}
}
