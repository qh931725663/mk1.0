package com.haaa.cloudmedical.app.user.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.haaa.cloudmedical.common.annotation.Log;
import com.haaa.cloudmedical.common.entity.Constant;
import com.haaa.cloudmedical.common.entity.Page;
import com.haaa.cloudmedical.common.entity.PatientListDTO;
import com.haaa.cloudmedical.common.entity.ResponseDTO;
import com.haaa.cloudmedical.common.util.BeanUtil;
import com.haaa.cloudmedical.common.util.IdCard;
import com.haaa.cloudmedical.common.util.MD5Util;
import com.haaa.cloudmedical.common.util.TokenUtil;
import com.haaa.cloudmedical.common.util.redis.RedisCacheUtil;
import com.haaa.cloudmedical.dao.DoctorDao;
import com.haaa.cloudmedical.entity.CheckReport;
import com.haaa.cloudmedical.entity.ClinicReport;
import com.haaa.cloudmedical.entity.Doctor;
import com.haaa.cloudmedical.entity.HospitalReport;
import com.haaa.cloudmedical.entity.InsuranceReport;
import com.haaa.cloudmedical.entity.Patient;
import com.haaa.cloudmedical.entity.User;

@Service
@Log(name = "医生端APP")
public class DoctorAppService {

	@Autowired
	private DoctorDao dao;

	@Autowired
	public RedisCacheUtil<Object> redis;

	private static Logger logger = Logger.getLogger(DoctorAppService.class);

	@Log(name = "登录")
	public ResponseDTO login(String user_phone, String user_pwd) {
		logger.info("医生登录");
		ResponseDTO dto = new ResponseDTO();
		int count = dao.countByAccount(user_phone);
		if (count == 0) {
			dto.setErrmsg("账号错误");
		} else {
			count = dao.countByAccount(user_phone, user_pwd);
			if (count == 0) {
				dto.setErrmsg("密码错误！");
			} else {
				String doctor_id = dao.getDoctorId(user_phone, user_pwd);
				String token = TokenUtil.generateToken(doctor_id, user_phone);
				Map<String, Object> doctorInfo = dao.getDoctorInfo(doctor_id);
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("user", doctorInfo);
				redis.setCacheMap(token, map);
				dto.setData(doctorInfo);
				dto.setLoginToken(token);
				dto.setFlag(true);
			}
		}
		return dto;
	}

	@Log(name = "更新医生信息")
	@Transactional
	public ResponseDTO update(User user, Doctor doctor) {
		logger.info("更新医生信息");
		ResponseDTO dto = new ResponseDTO();
		String user_card = user.getUser_card();
		if (user_card != null && user_card.length() > 0) {
			IdCard card = IdCard.of(user_card);
			if (card.flag) {
				user.setUser_sex(card.getSex() % 2 == 1 ? "200001" : "200002");
				user.setUser_age(card.getAge() + "");
				user.setUser_birthday(card.getBirthday());
			}
		} else {
			dto.setErrmsg("身份证号码为空！");
			logger.error("身份证号码为空");
		}
		dao.update(user, "n_user");
		doctor.setDoctor_id(user.getUser_id());
		doctor.setDoctor_name(user.getUser_name());
		dao.update(doctor, "d_doctor");
		Map<String, Object> doctorInfo = dao.getDoctorInfo(user.getUser_id());
		dto.setFlag(true);
		dto.setData(doctorInfo);
		return dto;
	}

	// 获取患者列表
	public ResponseDTO getPatientList(String doctor_id, String ahdi_level, String chronic) {

		// 过滤器
		Predicate<Map<String, Object>> byChronic = m -> {
			boolean flag = false;
			if (chronic.equals("0")) {
				// 全部
				flag = true;
			} else if (chronic.equals("1")) {
				// 有高血压
				flag = m.get("chronic").toString().contains("114");
			} else if (chronic.equals("2")) {
				// 有糖尿病
				flag = m.get("chronic").toString().contains("110");
			} else if (chronic.equals("3")) {
				// 其他
				String[] value = m.get("chronic").toString().split(",");
				int length = value.length;
				if (length == 1) {
					// 身体健康的人
				} else if (length == 2 || length == 3) {
					// 可能有其他慢性病
					flag = Arrays.stream(value).anyMatch(s -> !s.equals("0") && !s.equals("110") && !s.equals("114"));
				} else if (length >= 4) {
					// 肯定有其他慢性病
					flag = true;
				}
			}
			return flag;
		};

		String url = BeanUtil.getProperty("dbconfig").getString("pictureuploadhttp");
		StringBuilder sql = new StringBuilder();
		List<String> values = new ArrayList<String>();
		sql.append("select a.user_id,a.user_name,a.user_phone,a.user_card,"
				+ "ifnull(a.user_sex,if(substr(a.user_card,17,1),200002,200001)) user_sex,"
				+ "year(from_days(datediff(now(),ifnull(a.user_birthday,substr(a.user_card,7,8))))) user_age,a.user_height,"
				+ "a.user_weight,a.user_blood,concat('" + url
				+ "',a.user_head_pic_upload_index) user_head_pic_upload_index,"
				+ "substr(getpy(a.user_name),1,1) type,a.ahdi_value,a.ahdi_level,a.mrs_value,a.mrs_level,a.chronic "
				+ "from n_user a,d_patient b where a.user_id = b.patient_id and b.doctor_id = ? ");
		values.add(doctor_id);
		if (!ahdi_level.equals("0")) {
			sql.append(" and a.ahdi_level = ? ");
			values.add(ahdi_level);
		}

		// 查询数据
		List<Map<String, Object>> patientList = dao.select(sql.toString(), values.toArray());

		// 处理null值
		patientList.forEach(m -> m.forEach((k, v) -> m.putIfAbsent(k, "")));
		patientList.forEach(m -> m.forEach((k, v) -> m.put(k, String.valueOf(v))));

		// 按照姓名首字母(大写)分组
		List<PatientListDTO> mailList = new ArrayList<>();
		Map<String, List<Map<String, Object>>> result = patientList.stream().filter(byChronic)
				.collect(Collectors.groupingBy(m -> String.valueOf(m.get("type"))));

		// 按照指定的结构包装数据
		result.forEach((k, v) -> {
			PatientListDTO pld = new PatientListDTO();
			pld.setType(k);
			pld.setList(v);
			mailList.add(pld);
		});

		// 按照姓名首字母(大写)由小到大排序
		List<PatientListDTO> mailListEnd = mailList.stream().sorted((m1, m2) -> m1.getType().compareTo(m2.getType()))
				.collect(Collectors.toList());
		ResponseDTO dto = new ResponseDTO();
		dto.setData(mailListEnd);
		dto.setFlag(true);
		return dto;
	}
	
	@Log(name="获取消息列表")
	public Page getPushMessageList(String doctor_id,int pageno,int pagesize){
		Page page = dao.getMessageList(doctor_id, pageno, pagesize);
		return page;
	}
	
	@Log(name = "修改患者是否接受推送消息")
	@Transactional
	public boolean setPushStatus(String patient_id,String is_send){
		String sql = " update d_patient set is_send = ? where patient_id = ? ";
		int rows = dao.execute(sql, is_send,patient_id);
		if(rows==0){
			return false;
		}else{
			return true;
		}
	}

	@Log(name = "添加患者")
	@Transactional
	public ResponseDTO addNewPatient(String doctor_id, String user_name, String user_phone, String user_card,
			String user_phs_phone) {
		logger.info("添加患者");
		String sql = "select * from n_user a,d_patient b where a.user_id = b.patient_id and (a.user_phone = ? or a.user_card = ? )";
		List<Map<String, Object>> list = dao.select(sql, user_phone, user_card);
		ResponseDTO dto = new ResponseDTO();
		if (list.size() == 2) {
			dto.setErrmsg("该手机号不能注册");
			logger.error("该手机号不能注册");
		}
		if (list.size() == 1) {
			Map<String, Object> member = list.get(0);
			Object old_user_phone = member.get("user_phone");
			if (old_user_phone == null || "".equals(old_user_phone.toString())) {
				dto.setErrmsg("请先绑定手机号与身份证号");
				logger.error("请先绑定手机号与身份证号");
			}
			if (old_user_phone != null && !"".equals(old_user_phone.toString())) {
				if (!member.get("doctor_id").toString().equals("0")) {
					dto.setErrmsg("该账号已与其他家庭医生绑定");
					logger.error("该账号已与其他家庭医生绑定");
				} else {
					String user_id = member.get("user_id").toString();
					dao.execute("update n_user set user_phs_phone = ? where user_id = ? ",
							user_phs_phone == null ? member.get("user_phs_phone") : user_phs_phone);
					dao.execute("update d_patient set doctor_id = ? where patient_id = ? ", doctor_id, user_id);
					dto.setFlag(true);
				}
			}
		}
		if (list.size() == 0) {
			dto = addPatientAT(doctor_id, user_name, user_phone, user_card, user_phs_phone);
		}
		if (!dto.isFlag()) {
			if (dto.getErrmsg() == null || dto.getErrmsg().equals("")) {
				dto.setErrmsg("添加患者失败");
				logger.error("添加患者失败");
			}
		}
		return dto;
	}

	@Transactional
	public ResponseDTO addPatientAT(String doctor_id, String user_name, String user_phone, String user_card,
			String user_phs_phone) {
		String initPassword = BeanUtil.getProperty("dbconfig").getString("initPassword");
		String create_date = LocalDateTime.now().toString();
		User user = new User();
		Patient patient = new Patient();
		user.setUser_name(user_name);
		user.setUser_card(user_card);
		user.setUser_phone(user_phone);
		user.setUser_phs_phone(user_phs_phone);
		user.setUser_birthday(user_card.substring(6, 14));// 生日
		user.setUser_pwd(MD5Util.encode(initPassword));
		user.setUser_sex(Math.abs(Integer.parseInt(user_card.substring(16, 17))) % 2 == 1 ? "200001" : "200002");// 性别
		user.setUser_type(Constant.USER_TYPE_PATIENT);
		user.setCreate_date(create_date);
		ResponseDTO dto = new ResponseDTO();
		try {
			long user_id = dao.insert(user, "n_user");
			patient.setPatient_id(String.valueOf(user_id));
			patient.setPatient_name(user_name);
			patient.setDoctor_id(doctor_id);
			patient.setCreate_date(create_date);
			try {
				dao.insert(patient, "d_patient");
				dto.setFlag(true);
			} catch (Exception e) {
				logger.error("", e);
				dao.delete("n_user", String.valueOf(user_id));
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return dto;
	}

	public Map<String, Object> getDoctorInfo(String doctor_id) {
		Map<String, Object> doctorInfo = dao.getDoctorInfo(doctor_id);
		return doctorInfo;
	}

	public ResponseDTO getPatientInfo(String patient_id) {
		Map<String, Object> patient = dao.getPatientInfo(patient_id);
		ResponseDTO dto = new ResponseDTO();
		dto.setData(patient);
		dto.setFlag(true);
		return dto;
	}

	@Log(name = "更新患者信息")
	public ResponseDTO updatePatientInfo(User user) {
		String user_card = user.getUser_card();
		String sql = "select * from n_user where user_card = ? ";
		List<Map<String, Object>> list = dao.select(sql, user_card);
		ResponseDTO dto;
		if (list.size() > 0) {
			dto = new ResponseDTO();
			dto.setErrmsg("身份证号码已存在");
		} else {
			dao.update(user, "n_user");
			dto = getPatientInfo(user.getUser_id());
		}
		return dto;
	}

	public Page getNews(String section, int pageno, int pagesize) {
		String url = BeanUtil.getProperty("dbconfig").getString("pictureuploadhttp");
		StringBuilder sql = new StringBuilder();
		sql.append("select a.order_id,b.user_name,concat('" + url
				+ "',b.user_head_pic_upload_index) user_head_pic_upload_index," + "a.title,concat('" + url
				+ "',a.pic_index) pic_index,a.short_introduction,if(a.news_type=2,a.url_index,concat('" + url
				+ "',a.url_index)) url_index,"
				+ "date_format(a.update_date,'%Y-%m-%d %H:%i') update_date,a.news_type from b_banner_news a,n_manager b "
				+ "where a.user_id = b.user_id and a.is_push_to_doctor = 1 and a.section = ?");
		if (section.equals("7")) {
			section = "2";
			sql.append(" and a.is_push_to_frontpage = 1 ");
		} else if (section.equals("8")) {
			section = "4";
			sql.append(" and a.is_push_to_frontpage = 1 ");
		}
		sql.append(" order by a.update_date desc");
		Page page = dao.pageQuery(sql.toString(), new Object[] { section }, pageno, pagesize);
		return page;
	}

	public ResponseDTO getHealthReport(String patient_id) {
		String sql = "select order_id,user_id,user_name,date_format(up_time,'%Y/%m/%d %H:%i') up_time,date_format(report_time,'%Y/%m/%d %H:%i') report_time,"
				+ "report_type,hosp_name,report_no,report_year from medical_report where user_id = ? order by up_time desc";
		List<Map<String, Object>> list = dao.select(sql, patient_id);
		list.forEach(m -> m.forEach((k, v) -> m.putIfAbsent(k, "")));
		Map<String, List<Map<String, Object>>> report = list.stream()
				.sorted((p1, p2) -> String.valueOf(p2.get("up_time")).compareTo(String.valueOf(p1.get("up_time"))))
				.collect(Collectors.groupingBy(p -> String.valueOf(p.get("report_year"))));
		List<Map<String, Object>> result = new ArrayList<>();
		report.forEach((k, v) -> {
			Map<String, Object> map = new HashMap<>();
			map.put("year", k);
			map.put("report", v);
			result.add(map);
		});
		ResponseDTO dto = new ResponseDTO();
		dto.setData(result);
		dto.setFlag(true);
		return dto;
	}

	public ResponseDTO getHealthReport(String order_id, String report_type) {
		String url = BeanUtil.getProperty("dbconfig").getString("pictureuploadhttp");
		String sql = "";
		if (report_type.equals(Constant.CHECK_REPORT)) {
			sql = "select a.order_id,a.user_name,date_format(a.check_time,'%Y-%m-%d') check_time,a.hosp_name,a.report_no from p_check_report a where a.order_id = ? ";
		} else if (report_type.equals(Constant.CLINIC_REPORT)) {
			sql = "select a.order_id,date_format(a.clinic_report_time,'%Y-%m-%d') clinic_report_time,a.user_name,a.hosp_name,a.department_name,a.doctor_name,a.report_doctor,"
					+ "a.clinic_report_disease,a.clinic_report_result from p_clinic_report a where a.order_id = ? ";
		} else if (report_type.equals(Constant.HOSPITAL_REPORT)) {
			sql = "select a.order_id,a.patient_name,date_format(a.hospital_report_time,'%Y-%m-%d') hospital_report_time,a.hospital_report_days,a.hosp_name,a.report_doctor,a.department_name,a.doctor_name,"
					+ "a.hospital_report_disease,a.hospital_report_result from p_hospital_report a where a.order_id = ? ";
		} else if (report_type.equals(Constant.INSURANCE_REPORT)) {
			sql = "select a.order_id,(select c.user_medicare_card from n_user c where c.user_id = a.user_id) user_medicare_card,a.user_name,"
					+ "(select c.user_card from n_user c where c.user_id = a.user_id) user_card,a.hosp_name,a.medical_insurance_type,"
					+ "date_format(a.medical_insurance_time,'%Y-%m-%d') medical_insurance_time,a.medical_insurance_total,a.medical_insurance_reimbursement_amount,a.medical_insurance_subsidy_amount "
					+ "from p_medical_insurance_report a where a.order_id = ? ";
		}
		Map<String, Object> report = dao.get(sql, new Object[] { order_id });
		sql = "select b.pic_num,concat('" + url
				+ "',b.medical_picture_upload) medical_picture_upload from p_picture b where b.parent_id= ? and b.pic_type = ? order by pic_num";
		List<Map<String, Object>> picture = dao.select(sql, order_id, report_type);
		report.put("pic_path_list", picture);
		ResponseDTO dto = new ResponseDTO();
		dto.setData(report);
		dto.setFlag(true);
		return dto;
	}

	@Log(name = "上传体检报告")
	public ResponseDTO saveHealthReport(CheckReport report) {
		ResponseDTO dto = new ResponseDTO();
		try {
			long order_id = dao.insert(report, "p_check_report");
			Map<String, Long> map = new HashMap<>();
			map.put("order_id", order_id);
			dto.setData(map);
			dto.setFlag(true);
		} catch (Exception e) {
			dto.setErrmsg("上传失败");
			logger.error("", e);
		}
		return dto;
	}

	@Log(name = "上传门诊报告")
	public ResponseDTO saveHealthReport(ClinicReport report) {
		ResponseDTO dto = new ResponseDTO();
		try {
			long order_id = dao.insert(report, "p_clinic_report");
			Map<String, Long> map = new HashMap<>();
			map.put("order_id", order_id);
			dto.setData(map);
			dto.setFlag(true);
		} catch (Exception e) {
			dto.setErrmsg("上传失败");
			logger.error("", e);
		}
		return dto;
	}

	@Log(name = "上传住院报告")
	public ResponseDTO saveHealthReport(HospitalReport report) {
		ResponseDTO dto = new ResponseDTO();
		try {
			long order_id = dao.insert(report, "p_hospital_report");
			Map<String, Long> map = new HashMap<>();
			map.put("order_id", order_id);
			dto.setData(map);
			dto.setFlag(true);
		} catch (Exception e) {
			dto.setErrmsg("上传失败");
			logger.error("", e);
		}
		return dto;
	}

	@Log(name = "上传医保记录")
	public ResponseDTO saveHealthReport(InsuranceReport report) {
		ResponseDTO dto = new ResponseDTO();
		try {
			long order_id = dao.insert(report, "p_medical_insurance_report");
			Map<String, Long> map = new HashMap<>();
			map.put("order_id", order_id);
			dto.setData(map);
			dto.setFlag(true);
		} catch (Exception e) {
			dto.setErrmsg("上传失败");
			logger.error("", e);
		}
		return dto;
	}

}
